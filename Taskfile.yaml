version: "3"

silent: true

env: {}

vars:
  frameworks: "django golang java_springboot laravel nodejs rails"
  languages: "ru en"
  framework_template_dir: "_pages/guides/framework_id"

tasks:
  # default:
  #   cmds:
  #     - task: xxx

  format:
    desc: 'Run all code formatters. Important vars: "paths".'
    run: once
    cmds:
      - task: format:gci
      - task: format:gofumpt

  format:gci:
    desc: 'Format code with gci. Important vars: "paths".'
    cmds:
      - gci write -s Standard -s Default {{.CLI_ARGS}} {{.paths | default "bin/"}}

  format:gofumpt:
    desc: 'Format code with gofumpt. Important vars: "paths".'
    cmds:
      - gofumpt -extra -w {{.CLI_ARGS}} {{.paths | default "bin/"}}

  # TODO: specify target framework
  gen:pages:
    desc: "Generate pages for all existing frameworks using framework_id folder as the source data"
    cmds:
      - |
        for framework in {{.frameworks}}
        do
          for lang in {{.languages}}
          do
            target_dir=pages_$lang/guides/$framework

            echo "# Regenerate $framework pages ($lang)"
            rm -rf $target_dir
            cp -a {{.framework_template_dir}} $target_dir
            find $target_dir -type f -exec sed -i -e "s|framework_id|$framework|g" {} \;

            if [ "x$framework" = "xgolang" ]
            then
              echo 1>&2 "WARNING: Removing $target_dir/200_real_apps because no content available for $framework at the moment"
              rm -rf $target_dir/200_real_apps*
            fi

            echo
          done
        done

      - |
        # FIXME: this page not available for other frameworks and languages yet
        git checkout pages_ru/guides/rails/200_real_apps/60_cron.md

  gen:demo:
    desc: "Generate asciinema werf demos"
    cmds:
      - echo TODO

  install:demo-tools-ubuntu:
    desc: "Install tools needed to record werf demos"
    cmds:
      # NOTE: also we need werf itself
      - sudo apt install pv asciinema
      - wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

  clean:
    desc: "Delete temporary directories after build/serve"
    cmds:
      - |
        for d in $(ls -1d ./_site* ./.jekyll-cache* ./.jekyll-metadata 2>/dev/null) ; do
          echo "Remove dir $d ..."
          rm -rf $d
        done
        echo "Remove configurator generated content"
        for d in $(ls -1d ./_includes/*/configurator ./pages_*/configurator* ./_data/*/configurator* 2>/dev/null) ; do
          echo "   Remove dir $d ..."
          rm -rf $d
        done

  local:gen:configurator:
    desc: "Regenerate configurator pages and copy to site directories"
    cmds:
      - |
        (
          echo Regenerate configurator pages...
          cd bin/configurator
          go run *.go
        )
        cp -R bin/configurator/static/* .
        cp -R bin/configurator/generated/* .

  docker:network:create:
    desc: 'Create shared docker network werfio-dev to use with werf/website'
    vars:
      NETWORK_NAME: werfio-dev
    cmds:
      - docker network create -d=bridge {{.NETWORK_NAME}}
    status:
      - docker network inspect {{.NETWORK_NAME}}

  compose:up:
    desc: 'Run jekyll in werf compose for local development. Use lang=en or lang=ru to run only specified lang. Run task compose:up in werf/werf repository to access documentation.'
    deps:
      - docker:network:create
    cmds:
      - |
        services="{{ .lang }}"
        services=${services:-"en ru"}

        # Run compose up in docs directory.
        which werf >/dev/null || source $(trdl use werf 1.2 beta)
        werf compose up jekyll_base backend --dev --docker-compose-command-options="$services front backend" --platform=linux/amd64 || true

  compose:down:
    desc: 'Stop and clean after werf compose'
    cmds:
      - |
        which werf >/dev/null || source $(trdl use werf 1.2 beta)
        # Workaround: set image variable to stub image.
        WERF_JEKYLL_BASE_DOCKER_IMAGE_NAME=nginx:latest \
        WERF_BACKEND_DOCKER_IMAGE_NAME=nginx:latest \
        werf compose down

  site:check-broken-links:
    desc: 'Check docs for broken links.'
    deps:
      - site:check-broken-links:ru
      - site:check-broken-links:en

  site:check-broken-links:ru:
    desc: 'Check ru docs for broken links.'
    cmds:
      - |
        ./scripts/docs/check_broken_links.sh ru

  site:check-broken-links:en:
    desc: 'Check en docs for broken links.'
    cmds:
      - |
        ./scripts/docs/check_broken_links.sh en

  site:run-spell-check:
    desc: 'Run spell check for all pages.'
    deps:
      - site:run-spell-check:ru
      - site:run-spell-check:en

  site:run-spell-check:ru:
    desc: 'Run spell check for ru pages. You can specify the path to a specific file with `-- ./path/to/file`'
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh ru {{.CLI_ARGS}}

  site:run-spell-check:en:
    desc: 'Run spell check for en pages. You can specify the path to a specific file with `-- ./path/to/file`'
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh en {{.CLI_ARGS}}

  site:generate-special-dictionary:
    desc: 'Generate a dictionary of special terms.'
    cmds:
      - |
        test -f ./scripts/docs/spelling/dictionaries/dev_OPS.dic && rm ./scripts/docs/spelling/dictionaries/dev_OPS.dic
        touch ./scripts/docs/spelling/dictionaries/dev_OPS.dic
        cat ./scripts/docs/spelling/wordlist | wc -l | sed 's/^[ \t]*//g' > ./scripts/docs/spelling/dictionaries/dev_OPS.dic
        sort -u -f ./scripts/docs/spelling/wordlist >> ./scripts/docs/spelling/dictionaries/dev_OPS.dic

  site:sort-custom-dict:
    desc: 'Sorts the list of words for a custom dictionary before pushing into the Git.'
    cmds:
      - |
        sort -u -f -o ./scripts/docs/spelling/wordlist{,}
