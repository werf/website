version: "3"

silent: true

env: {}

vars:
  frameworks: "django golang java_springboot laravel nodejs rails"
  languages: "ru en"
  framework_template_dir: "_pages/guides/framework_id"

tasks:

  format:
    desc: 'Run all code formatters. Important vars: "paths".'
    run: once
    cmds:
      - task: format:gci
      - task: format:gofumpt

  format:gci:
    desc: 'Format code with gci. Important vars: "paths".'
    cmds:
      - gci write -s Standard -s Default {{.CLI_ARGS}} {{.paths | default "bin/"}}

  format:gofumpt:
    desc: 'Format code with gofumpt. Important vars: "paths".'
    cmds:
      - gofumpt -extra -w {{.CLI_ARGS}} {{.paths | default "bin/"}}

  local:gen:configurator:
    desc: "Regenerate configurator pages and copy to site directories"
    cmds:
      - |
        (
          echo Regenerate configurator pages...
          cd bin/configurator
          go run *.go
        )
        cp -R bin/configurator/static/* .
        cp -R bin/configurator/generated/* .

  dev:setup:docker-network:
    desc: "Create shared docker network werfio-dev to use with werf/website"
    vars:
      NETWORK_NAME: werfio-dev
    cmds:
      - docker network create -d=bridge {{.NETWORK_NAME}}
    status:
      - docker network inspect {{.NETWORK_NAME}}

  dev:setup:website:
    desc: "Run jekyll in werf compose for local development. Use lang=en or lang=ru to run only specified lang. Run task dev:setup:website in werf/werf repository to access documentation."
    deps:
      - dev:setup:docker-network
    cmds:
      - |
        services="{{ .lang }}"
        services=${services:-"en ru"}

        # Run compose up in docs directory.
        which werf >/dev/null || source $(trdl use werf 2 beta)
        werf compose up jekyll_base backend --dev --docker-compose-command-options="$services front backend" --platform=linux/amd64 || true

  dev:cleanup:website:
    desc: "Stop and clean after werf compose"
    cmds:
      - |
        which werf >/dev/null || source $(trdl use werf 2 beta)
        # Workaround: set image variable to stub image.
        WERF_JEKYLL_BASE_DOCKER_IMAGE_NAME=nginx:latest \
        WERF_BACKEND_DOCKER_IMAGE_NAME=nginx:latest \
        werf compose down
        docker network delete werfio-dev
      - |
        for d in $(ls -1d ./_site* ./.jekyll-cache* ./.jekyll-metadata 2>/dev/null) ; do
          echo "Remove dir $d ..."
          rm -rf $d
        done
        echo "Remove configurator generated content"
        for d in $(ls -1d ./_includes/*/configurator ./pages_*/configurator* ./_data/*/configurator* 2>/dev/null) ; do
          echo "   Remove dir $d ..."
          rm -rf $d
        done

  site:check-broken-links:
    desc: "Check docs for broken links."
    deps:
      - site:check-broken-links:ru
      - site:check-broken-links:en

  site:check-broken-links:ru:
    desc: "Check ru docs for broken links."
    cmds:
      - |
        ./scripts/docs/check_broken_links.sh ru

  site:check-broken-links:en:
    desc: "Check en docs for broken links."
    cmds:
      - |
        ./scripts/docs/check_broken_links.sh en

  site:run-spell-check:
    desc: "Run spell check for all pages."
    deps:
      - site:run-spell-check:ru
      - site:run-spell-check:en

  site:run-spell-check:ru:
    desc: "Run spell check for ru pages. You can specify the path to a specific file with `-- ./path/to/file`"
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh ru {{.CLI_ARGS}}

  site:run-spell-check:en:
    desc: "Run spell check for en pages. You can specify the path to a specific file with `-- ./path/to/file`"
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh en {{.CLI_ARGS}}

  site:generate-special-dictionary:
    desc: "Generate a dictionary of special terms."
    cmds:
      - |
        docker run --rm -v $(pwd)/scripts/:/scripts registry.werf.io/website/sorter:latest bash -c '
          test -f ./scripts/docs/spelling/dictionaries/dev_OPS.dic && rm ./scripts/docs/spelling/dictionaries/dev_OPS.dic
          touch ./scripts/docs/spelling/dictionaries/dev_OPS.dic
          cat ./scripts/docs/spelling/wordlist | wc -l | sed "s/^[ \t]*//g" >> ./scripts/docs/spelling/dictionaries/dev_OPS.dic
          sort -u -f -o ./scripts/docs/spelling/wordlist{,}
          sort -u -f ./scripts/docs/spelling/wordlist >> ./scripts/docs/spelling/dictionaries/dev_OPS.dic
        '

  site:get-words-with-typos:
    desc: "Pulls out a list of all the terms in all pages that were considered a typo"
    deps:
      - site:get-words-with-typos:ru
      - site:get-words-with-typos:en

  site:get-words-with-typos:ru:
    desc: "Pulls out a list of all the terms in RU pages that were considered a typo"
    cmds:
      - |
        task site:run-spell-check:ru | sed '1,/Checking/ d' | sed '/^$/d' | sed '/Checking/d' | sort -u > spell_log_ru

  site:get-words-with-typos:en:
    desc: "Pulls out a list of all the terms in EN pages that were considered a typo"
    cmds:
      - |
        task site:run-spell-check:en | sed '1,/Checking/ d' | sed '/^$/d' | sed '/Checking/d' | sort -u > spell_log_en

  site:view-plain-text-of-target-html:en:
    desc: "Displays EN HTML stripped of tags."
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh en {{.CLI_ARGS}} plain_text

  site:view-plain-text-of-target-html:ru:
    desc: "Displays RU HTML stripped of tags."
    cmds:
      - |
        ./scripts/docs/spelling/spell_check.sh ru {{.CLI_ARGS}} plain_text

  site:view-plain-text-of-target-html:
    desc: "Displays both HTML stripped of tags."
    cmds:
      - |
        task site:view-plain-text-of-target-html:en -- {{.CLI_ARGS}}
        task site:view-plain-text-of-target-html:ru -- {{.CLI_ARGS}}

  _image:build:
    cmds:
      - docker build {{.CLI_ARGS}} --platform=linux/amd64,linux/arm64 -f "{{.dfilePath}}" -t "{{.imageName}}" "{{.context | default "."}}"

  image:build:sorter:
    desc: 'Build wordlist sorter image. Important vars: "imageName".'
    cmds:
      - task: _image:build
        vars:
          dfilePath: scripts/docs/spelling/sorter/Dockerfile
          imageName:
            sh: "echo registry-write.werf.io/website/sorter:latest"

  _image:push:
    cmds:
      - docker push {{.CLI_ARGS}} "{{.imageName}}"

  image:publish:sorter:
    desc: 'Build and publish wordlist sorter image. Important vars: "imageName".'
    deps:
      - image:build:sorter
    cmds:
      - task: _image:push
        vars:
          imageName:
            sh: "echo registry-write.werf.io/website/sorter:latest"
