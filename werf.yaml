{{ $_ := set . "CacheVersion" "20251021" }}

configVersion: 1
project: werf-site
---

image: jekyll_base
from: jekyll/builder:4.2.0
fromCacheVersion: {{ $.CacheVersion }}
git:
  - add: /
    to: /app
    owner: jekyll
    group: jekyll
    includePaths:
      - Gemfile
      - Gemfile.lock
    stageDependencies:
      setup: ["**/*"]
shell:
  setup:
    - cd /app
    - bundle install
---

image: common_artifacts
from: ubuntu:20.04
fromCacheVersion: {{ $.CacheVersion }}
git:
  - add: /.werf/artifacts
    to: /artifacts
    excludePaths:
      - '*.sh'
      - 'convert'
      - '*.xml-template'
shell: 
  install: 
    - cd /artifacts
    - sed -i 's#{% raw %}\ *##; s#{% endraw %}##' /artifacts/releases.json
    - if [ -f feeds.tgz.base64 ] ; then base64 -d feeds.tgz.base64 > feeds.tgz; tar -xzf feeds.tgz  --transform='s/feeds/./' --wildcards '*.xml'; else echo "RSS feeds file feeds.tgz is absent!";  exit 1 ; fi
    - rm -f feeds.tgz.base64
    - rm -f feeds.tgz
---
image: configuration_artifacts
from: golang:1.22
fromCacheVersion: {{ $.CacheVersion }}
git:
  - add: /bin/configurator
    to: /configurator
    stageDependencies:
      install: '**/*'
shell:
  install:
    - cd /configurator
    - echo Regenerate configurator pages...
    - go run *.go
---
{{- range $lang := list "en" "ru" }}
image: doc_{{ $lang }}
fromImage: jekyll_base
fromCacheVersion: {{ $.CacheVersion }}
import:
  - image: common_artifacts
    add: /artifacts
    to: /artifacts
    before: setup
  - image: configuration_artifacts
    add: /configurator
    includePaths:
      - static
      - generated
    to: /tmp
    after: install
git:
  - add: /
    to: /app
    owner: jekyll
    group: jekyll
    includePaths:
      - _data
      - _includes
      - _layouts
      - _plugins
      - assets
      - examples
      - pages_{{ $lang }}
      - ssi
      - _config.yml
      - _config_dev.yml
      - _config_{{ $lang }}.yml
      - "*.xml"
      - "*.sh"
      - "*.asc"
      - "*.png"
      - "*.svg"
      - favicon.ico
      - robots.txt
      - site.webmanifest
    stageDependencies:
      beforeSetup: ["**/*"]
shell:
  beforeSetup:
    - cp -R /tmp/static/* /tmp/generated/* /app
  setup:
    - cd /app
    - set -u
    - mkdir -m 0777 -p /app/_site
    - cp -f /artifacts/*.json /app/_data/_common/
    - cp -f /artifacts/pages_{{ $lang }}/* /app/pages_{{ $lang }}/
    - export JEKYLL_ENV="{{ $.Env }}"
    {{- if eq $.Env "development" }}
    - bundle exec jekyll build -tV --config _config.yml,_config_dev.yml,_config_{{ $lang }}.yml --destination _site/
    {{- else }}
    - bundle exec jekyll build --config _config.yml,_config_{{ $lang }}.yml --destination _site/
    {{- end }}
---
{{ end -}}

image: backend-artifact
from: golang:1.22
fromCacheVersion: {{ $.CacheVersion }}
shell:
  install:
    - cd /go/src/app
    - go get -d -v ./
    - go build -ldflags "-w -s" -v -o /go/src/app/server /go/src/app/
git:
  - add: /backend
    to: /go/src/app
    stageDependencies:
      install: '**/*'
---
image: backend
from: ubuntu:22.04
fromCacheVersion: {{ $.CacheVersion }}
shell:
  install:
    - apt update -y
    - apt install -y git curl jq vim
import:
  - image: backend-artifact
    add: /go/src/app/server
    to: /app/server
    before: setup
imageSpec:
  config:
    workingDir: /app

---
image: web-backend
fromImage: backend
fromCacheVersion: {{ $.CacheVersion }}
import:
{{- range $lang := list "en" "ru" }}
  - image: doc_{{ $lang }}
    add: /app/_site
    to: /app/root/{{ $lang }}
    after: setup
{{ end -}}
imageSpec:
  config:
    workingDir: /app
---
image: tuf-router
from: fabiocicerchia/nginx-lua:1.21-alpine@sha256:525aa8fd0ac9bf5c7e82cd83b3f8ebf620bedb0d0b1e52955745fd53917eb24c
fromCacheVersion: {{ $.CacheVersion }}
git:
  - add: /.werf
    to: /etc/nginx
    excludePaths:
      - "artifacts"
      - "nginx-dev.conf"
    stageDependencies:
      install: "**/*"
shell:
  install:
    - mv /etc/nginx/nginx-tuf-router.conf /etc/nginx/nginx.conf
---
{{- if eq $.Env "test" }}
image: spell-checker
from: ubuntu:20.04
fromCacheVersion: {{ $.CacheVersion }}
import:
  - image: doc_ru
    add: /app/_site
    to: /spelling/ru
    after: install
  - image: doc_en
    add: /app/_site
    to: /spelling/en
    after: install
git:
  - add: /scripts/docs/spelling/dictionaries/
    to: /temp/dictionaries
    stageDependencies:
      setup: '**/*'
  - add: /scripts/docs/spelling/internal/
    to: /temp/internal
    stageDependencies:
      setup: '**/*'
shell:
  beforeInstall:
    - apt -y update && apt -y upgrade
    - apt install -y locales
    - sed -i -e 's/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/' /etc/locale.gen && locale-gen
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
  install:
    - apt -y update && apt -y install hunspell html2text python3.9 python3-pip
    - pip3 install beautifulsoup4
  setup:
    - rm /usr/share/hunspell/*
    - cp /temp/dictionaries/* /usr/share/hunspell/
    - cp /temp/internal/* /spelling/en
    - cp /temp/internal/* /spelling/ru
imageSpec:
  config:
    env:
      LANG: ru_RU.UTF-8
      LANGUAGE: ru_RU:ru
      LC_LANG: ru_RU.UTF-8
      LC_ALL: ru_RU.UTF-8
      LC_MESSAGES: ru_RU.UTF-8
      TZ: Europe/Moscow
{{ end -}}
