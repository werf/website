### Требования

* Кластер Kubernetes.

* Публичный репозиторий в container registry.

* Git версии 2.18.0 или выше.
{% if include.powershell == true %}
* PowerShell.
{% endif %}

### Сборка и развертывание с werf

Содержимое демо-проекта:

{% tree_file_viewer '/examples/configurator/local-dev' default_file='werf.yaml' %}

Инициализируйте демо-проект на локальной машине:

```{{include.shell}}
git clone https://github.com/werf/examples
{% if include.powershell == true %}
cp -Recurse -Force examples/local-dev example
{% else %}
cp -rf examples/local-dev example
{% endif %}
cd example
git init
git add .
git commit -m-
```

{% if include.buildah == true %}
Включите Buildah-сборщик:

```shell
export WERF_BUILDAH_MODE=auto
```
{% endif %}

Укажите секретный ключ werf для расшифровки секретов в `.helm/secret-values.yaml`:

```{{include.shell}}
{%- if include.powershell == true %}
$ENV:WERF_SECRET_KEY="733658e8ce39dff4ceef0a3e5d8c15f6"
{%- else %}
export WERF_SECRET_KEY=733658e8ce39dff4ceef0a3e5d8c15f6
{%- endif %}
```

Запустите сборку и развертывание с werf:

```{{include.shell}}
werf converge --dev --repo "<путь к репозиторию в container registry>" --env production
```

Убедитесь, что развернутое приложение действительно работает:

```{{include.shell}}
werf kubectl run tmp --image=alpine -n demo-app-production -it --rm -- sh
> apk add curl
> curl 'http://frontend/ping'
> curl 'http://frontend/remember?answer=Hello&name=You'
> curl 'http://frontend/say'
```

Удалите развернутое приложение:

```{{include.shell}}
werf dismiss --env production
```
