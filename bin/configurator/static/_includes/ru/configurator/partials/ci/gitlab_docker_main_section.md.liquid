### Требования

- GitLab;

- Хост для установки GitLab Runner, имеющий:

  - [Docker Engine](https://docs.docker.com/engine/install/).

### Установка GitLab Runner

Установите GitLab Runner на выделенный для него хост, следуя [официальным инструкциям](https://docs.gitlab.com/runner/install/linux-repository.html).

{% include configurator/partials/ci/buildah_ubuntu.md.liquid %}

### Регистрация GitLab Runner

Для регистрации GitLab Runner в GitLab следуйте [официальным инструкциям](https://docs.gitlab.com/runner/register/index.html), указав Docker в качестве executor'а и любой образ в качестве image (например, `alpine`).

### Настройка GitLab Runner

На хосте GitLab Runner выполните следующие команды:
```bash
# Создание необходимых директорий и прав
mkdir -p $HOME/.local/share/containers $HOME/.werf
sudo chown -R 1000:1000 $HOME/.local/ $HOME/.werf
chmod 755 $HOME/.local/share/containers
```

После чего нужно запустить GitLab Runner следующим образом:
```bash
docker run -d --name gitlab-runner --restart always \
  -v $HOME/.local/share/containers:/home/ubuntu/.local/share/containers \
  -v $HOME/.werf:/home/ubuntu/.werf \
  -v /srv/gitlab-runner/config:/etc/gitlab-runner \
  -v /var/run/docker.sock:/var/run/docker.sock \
  gitlab/gitlab-runner:latest
```

На хосте GitLab Runner откройте его конфигурационный файл `config.toml` и добавьте зарегистрированному ранее GitLab Runner следующие опции:
```toml
[[runners]]
  name = "<name of the Runner you registered>"
  [runners.docker]
    security_opt = ["seccomp:unconfined", "apparmor:unconfined"]
    volumes = [
    # buildah cache
    "/home/ubuntu/.local/share/containers:/home/build/.local/share/containers",
    # werf cache
    "/home/ubuntu/.werf:/home/build/.werf"
    ]
```

### Использование FUSE на старых ядрах Linux

Если хост GitLab Runner имеет версию ядра Linux 5.12 или ниже, то установите на хост `fuse` и добавьте в файл `config.toml` ещё одну опцию:

```toml
[[runners]]
  name = "<имя зарегистрированного Runner'а>"
  [runners.docker]
    devices = ["/dev/fuse"]
```

При желании произведите [дополнительную конфигурацию](https://docs.gitlab.com/runner/configuration/advanced-configuration.html) GitLab Runner.

{% include configurator/partials/ci/configuring_the_container_registry.md.liquid %}

### Подготовка системы к кроссплатформенной сборке (опционально)

{% include configurator/partials/ci/cross_platform_note.md.liquid %}

Регистрируем в системе эмуляторы с помощью образа qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
