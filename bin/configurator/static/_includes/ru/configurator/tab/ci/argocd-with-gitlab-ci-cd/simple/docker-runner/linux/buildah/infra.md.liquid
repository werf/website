### Требования

- GitLab;

- Хост для запуска GitLab Runner'а с предустановленным:

  - [Docker Engine](https://docs.docker.com/engine/install/);

- [Argo CD](https://argo-cd.readthedocs.io/en/stable/getting_started/#1-install-argo-cd).

### Установка GitLab Runner

Установите GitLab Runner на выделенный для него хост, следуя [официальным инструкциям](https://docs.gitlab.com/runner/install/linux-repository.html).

### Регистрация GitLab Runner

Следуйте [официальным инструкциям](https://docs.gitlab.com/runner/register/index.html) по регистрации GitLab Runner'а в GitLab'е; укажите `docker` в качестве исполнителя и любой образ в качестве default image (например, `alpine`).

### Настройка GitLab Runner

На хосте с GitLab Runner'ом откройте его конфигурационный файл `config.toml` и добавьте следующие параметры к GitLab Runner'у, который вы зарегистрировали выше:

```toml
[[runners]]
  name = "<имя зарегистрированного Runner'а>"
  [runners.docker]
    security_opt = ["seccomp:unconfined", "apparmor:unconfined"]
    volumes = ["/home/build/.werf"]
```

Если версия ядра Linux на хосте с GitLab Runner'ом ≤ 5.12, установите `fuse` на хост и добавьте дополнительный параметр в файл `config.toml`:

```toml
[[runners]]
  name = "<имя зарегистрированного Runner'а>"
  [runners.docker]
    devices = ["/dev/fuse"]
```

При необходимости проведите [дополнительную настройку](https://docs.gitlab.com/runner/configuration/advanced-configuration.html) GitLab Runner'а.

### Настройка container registry

[Включите сборку мусора](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) в своем container registry.

### Подготовка системы для кроссплатформенной борки (опционально)

> Этот шаг необходим только если проводится сборка образов для платформ, отличных от хост-платформы, на которой запущен werf.

С помощью qemu-user-static зарегистрируйте эмуляторы в системе:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```

### Установка Argo CD Image Updater

Установите Argo CD Image Updater с патчем ["continuous deployment of OCI Helm chart type application"](https://github.com/argoproj-labs/argocd-image-updater/pull/405):

```shell
kubectl apply -n argocd -f https://raw.githubusercontent.com/werf/3p-argocd-image-updater/master/manifests/install.yaml
```
