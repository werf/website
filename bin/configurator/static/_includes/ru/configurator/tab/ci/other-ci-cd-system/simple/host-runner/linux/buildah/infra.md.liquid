### Требования

- CI-система;

- Linux-хост для запуска CI-задач, имеющий:

  * Shell Runner вашей CI-системы;

  * Bash;

  * Git версии 2.18.0 или выше;

  * GPG.

### Установка Buildah

Для установки Buildah выполните следующие инструкции на хосте для запуска CI-задач:

* Установите пакет Buildah, следуя [официальным инструкциям](https://github.com/containers/buildah/blob/main/install.md), но не производите его дальнейшую настройку. Если для вашего дистрибутива нет готовых пакетов Buildah, используйте следующие инструкции:

  {% offtopic title="Ручная установка Buildah" %}

  - Установите пакеты, предоставляющие программы `newuidmap` и `newgidmap`.

  - Убедитесь, что программы `newuidmap` и `newgidmap` имеют корректные права:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Установите пакет, предоставляющий файлы `/etc/subuid` и `/etc/subgid`.

  - Убедитесь, что в файлах `/etc/subuid` и `/etc/subgid` имеется строка вида `runner:1000000:65536`, где:

    - `runner` — имя пользователя, из под которого запускаются CI-задачи;

    - `1000000` — первый subUID/subGID в выделяемом диапазоне;

    - `65536` — размер диапазона subUIDs/subGIDs (минимум `65536`).

    Избегайте коллизий с другими диапазонами, если они имеются. Изменение файлов может потребовать перезагрузки. Подробнее в `man subuid` и `man subgid`.

  {% endofftopic %}

* (Для Linux 5.12 и ниже) Установите пакет, предоставляющий программу `fuse-overlayfs`.

* Убедитесь, что путь `/home/<пользователь для запуска CI-задач>/.local/share/containers` создан, и пользователь, из под которого запускаются CI-задачи, имеет доступ на чтение и запись.

* Команда `sysctl -ne kernel.unprivileged_userns_clone` НЕ должна вернуть `0`, а иначе выполните `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

* Команда `sysctl -n user.max_user_namespaces` должна вернуть `15000` или больше, а иначе выполните `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

### Установка werf

Для установки werf, на хосте для запуска CI-задач выполните:

```shell
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

### Конфигурация container registry

[Включите сборщик мусора]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0-container-registry" | relative_url }}) вашего container registry.

### Подготовка системы к кроссплатформенной сборке (опционально)

> Данный шаг требуется только для сборки образов для платформ, отличных от платформы системы, где запущен werf.

Регистрируем в системе эмуляторы с помощью образа qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
