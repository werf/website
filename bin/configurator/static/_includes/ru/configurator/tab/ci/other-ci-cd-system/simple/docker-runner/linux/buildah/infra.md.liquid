### Требования

- CI-система;

- Linux-хост для запуска CI-задач, имеющий:

  * Docker Runner вашей CI-системы;

  * [Docker Engine](https://docs.docker.com/engine/install/).

### Настройка Runner'а

На хосте для запуска CI задач создайте volume `werf`:

```shell
docker volume create werf
```

Настройте Runner вашей CI-системы так, чтобы создаваемые контейнеры имели следующие параметры:

* `--security-opt seccomp:unconfined`;

* `--security-opt apparmor:unconfined`;

* `--volume werf:/home/build/.werf`.

Если хост для запуска CI-задач имеет версию ядра Linux 5.12 или ниже, то установите на хост `fuse` и настройте Runner так, чтобы создаваемые контейнеры имели дополнительный параметр `--device /dev/fuse`.

### Конфигурация container registry

[Включите сборщик мусора]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0-container-registry" | relative_url }}) вашего container registry.

### Подготовка системы к кроссплатформенной сборке (опционально)

> Данный шаг требуется только для сборки образов для платформ, отличных от платформы системы, где запущен werf.

Регистрируем в системе эмуляторы с помощью образа qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
