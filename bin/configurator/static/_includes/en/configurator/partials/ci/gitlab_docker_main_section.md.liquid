### Requirements

- GitLab;
- Host for GitLab Runner, with:

  - [Docker Engine](https://docs.docker.com/engine/install/).

### Installing GitLab Runner

Install GitLab Runner on the dedicated host using the [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html).

{% include configurator/partials/ci/buildah_ubuntu.md.liquid %}

### Registering GitLab Runner

You can follow the [official registration guide](https://docs.gitlab.com/runner/register/index.html), or run the following command to register the Runner with Docker executor:

```bash
gitlab-runner register \
  --non-interactive \
  --name "werf-runner" \
  --docker-image alpine \
  --url $URL \
  --token $TOKEN \
  --executor docker \
  --docker-security-opt "seccomp:unconfined" \
  --docker-security-opt "apparmor:unconfined" \
  --docker-volumes "$HOME/.werf:/home/build/.werf" \
  --docker-volumes "$HOME/.local/share/containers:/home/build/.local/share/containers"
```

> **Note:** The user running GitLab Runner must have UID and GID **1000:1000** â€” this is required for cache support. If not set, caching will not work.

### Using FUSE on Older Kernels

If your host uses **Linux kernel 5.12 or earlier**, you need to install `fuse` and add the following to your `config.toml`:

```toml
[[runners]]
  name = "<your-runner-name>"
  [runners.docker]
    devices = ["/dev/fuse"]
```

You can find additional tuning options in the [advanced GitLab Runner configuration guide](https://docs.gitlab.com/runner/configuration/advanced-configuration.html).

{% include configurator/partials/ci/configuring_the_container_registry.md.liquid %}

### Preparing for cross-platform builds (Optional)

{% include configurator/partials/ci/cross_platform_note.md.liquid %}

Register QEMU emulators for multi-arch support using the following command:

```bash
docker run --restart=always --name=qemu-user-static \
  -d --privileged \
  --entrypoint=/bin/sh multiarch/qemu-user-static \
  -c "/register --reset -p yes && tail -f /dev/null"
```