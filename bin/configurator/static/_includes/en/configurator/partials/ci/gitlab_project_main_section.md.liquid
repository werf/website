### Configuring the GitLab project
{% if include.type == "best-monorepo-linux-buildah" or include.type == "best-monorepo-linux-docker" or include.type == "best-monorepo-kubernetes" or include.type == "best-monorepo-docker" or include.type == "best-application-docker" or include.type == "best-application-buildah" or include.type == "best-application-host-docker" or include.type == "best-application-kubernetes-buildah" %}
- Enable [Require a successful pipeline for merge requests](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html#require-a-successful-pipeline-for-merge).

- Enable the option to [auto-cancel redundant pipelines](https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines).
{% endif %}
* [Create and save the access token](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token) to clean up the no longer needed images from the container registry with the following parameters:

  * **Token name:** `werf-images-cleanup`;

  * **Role:** `developer`;

  * **Scopes:** `api`.

* Add the following variables to the [project variables](https://docs.gitlab.com/ee/ci/variables/#for-a-project):
{% if include.type == "best-monorepo-linux-buildah" or include.type == "best-monorepo-linux-docker" or include.type == "best-monorepo-kubernetes" or include.type == "best-monorepo-docker" or include.type == "best-application-docker" or include.type == "best-application-buildah" or include.type == "best-application-host-docker" or include.type == "best-application-kubernetes-buildah" %}
  * werf version:

    * **Key:** `WERF_VERSION`;

    * **Value:** `1.2 stable`;
{% endif %}
  * Access token to clean up the no longer needed images:
    * **Key:** `WERF_IMAGES_CLEANUP_PASSWORD`;

    * **Value:** `<"werf-images-cleanup" access token you saved earlier>`;

    * **Protect variable:** `yes`;

    * **Mask variable:** `yes`.

* [Add a scheduled nightly task](https://docs.gitlab.com/ee/ci/pipelines/schedules.html#add-a-pipeline-schedule) to clean up the no longer needed images in the container registry by setting the `main`/`master` branch as the **Target branch**.

### Configuring CI/CD of the project

This is how the repository that uses werf for build and deploy might look:

{% if include.type == "docker-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/simple/gitlab-ci-cd/docker-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "host-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/simple/gitlab-ci-cd/host-runner/linux/docker' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "host-linux-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/simple/gitlab-ci-cd/host-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "kubernetes-linux-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/simple/gitlab-ci-cd/kubernetes-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "kubernetes-linux-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/monorepo/host-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "kubernetes-linux-docker" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/monorepo/host-runner/linux/docker' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-monorepo-kubernetes" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/monorepo/kubernetes-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-monorepo-docker" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/monorepo/docker-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-application-docker" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/app-repo/docker-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-application-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/app-repo/host-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-application-host-docker" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/app-repo/host-runner/linux/docker' default_file='.gitlab-ci.yml' %}
{% elsif include.type == "best-application-kubernetes-buildah" %}
{% tree_file_viewer '/examples/configurator/ci-cd/best-practice/with-per-repo-ci-cd/gitlab-ci-cd/app-repo/kubernetes-runner/linux/buildah' default_file='.gitlab-ci.yml' %}
{% endif %}

Extras:
  * Add authorization options for `werf cleanup` in the container registry by following [instructions]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#features-of-working-with-different-container-registries" | relative_url }}).
