### Requirements

- GitLab;

- Linux host to install the GitLab Runner, featuring:

  * Bash;

  * Git version 2.18.0 or above;

  * GPG{{include.gpg_ending}}
{% if include.docker == true %}
  - [Docker Engine](https://docs.docker.com/engine/install/).
{% endif %}

{% if include.argocd == true %}
- [Argo CD](https://argo-cd.readthedocs.io/en/stable/getting_started/#1-install-argo-cd).
{% endif %}

### Installing the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html) to install the GitLab Runner on your dedicated host.

{% if include.buildah == true %}
{% include configurator/partials/ci/buildah_install.md.liquid %}
{% offtopic title="Possible error: reading JSON file /run/containers/0/auth.json: no such file or directory" %}

Buildah may ignore Docker's standard authentication settings from `~/.docker/config.json` 
and attempt to use default login credentials from `/run/containers/0/auth.json`, 
resulting in the error:
```bash
Error: reading JSON file "/run/containers/0/auth.json": no such file or directory
```

**Solution**:

1. Determine Buildah working directory:
{% raw %}
```bash
RUNROOT=$(buildah info --format '{{.store.RunRoot}}')  # Typically: /run/user/$(id -u)/containers
```
{% endraw %}

2. Manually copy Docker authentication settings:
```bash
cp ~/.docker/config.json "$RUNROOT/auth.json"
```

3. Configure GitHub Runner's systemd unit (replace `1000` with actual UID):
```bash
[Service]
Environment=XDG_RUNTIME_DIR=/run/user/1000  # Use: id -u <runner-user>
```

4. Apply changes:
```bash
sudo systemctl daemon-reload
sudo systemctl restart github-runner.service
```

{% endofftopic %}
{% endif %}

### Installing werf

To install werf on the GitLab Runner host, run the following command:

```
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

### Registering the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/register/index.html) to register GitLab Runner in GitLab: set Shell as the executor. Once the registration is complete, you may want to perform [additional GitLab Runner configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html).

### Configuring the container registry

[Enable garbage collection](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) for your container registry.

### Preparing the system for cross-platform building (optional)

> This step only needed to build images for platforms other than host platform running werf.

Register emulators on your system using qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
{% if include.argocd == true %}
### Installing Argo CD Image Updater

Install Argo CD Image Updater with the ["continuous deployment of OCI Helm chart type application" patch](https://github.com/argoproj-labs/argocd-image-updater/pull/405):

```shell
kubectl apply -n argocd -f https://raw.githubusercontent.com/werf/3p-argocd-image-updater/master/manifests/install.yaml
```
{% endif %}
