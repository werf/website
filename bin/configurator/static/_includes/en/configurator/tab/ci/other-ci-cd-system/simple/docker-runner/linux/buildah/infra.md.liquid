### Requirements

- CI system;

- Linux host to run the CI jobs, featuring:

  * Docker Runner of your CI system of choice;

  * [Docker Engine](https://docs.docker.com/engine/install/).

### Prepare the environment

(For Ubuntu 23.10 and later) on the GitLab Runner host run:

```shell
{ echo "kernel.apparmor_restrict_unprivileged_userns = 0" && echo "kernel.apparmor_restrict_unprivileged_unconfined = 0";} | sudo tee -a /etc/sysctl.d/20-apparmor-donotrestrict.conf && sudo sysctl -p /etc/sysctl.d/20-apparmor-donotrestrict.conf
```

### Configuring the Runner

Create the `werf` volume on the host where CI jobs are run:

```shell
docker volume create werf
```

Configure your CI system's Runner so that the containers you create have the following parameters:

* `--security-opt seccomp:unconfined`;

* `--security-opt apparmor:unconfined`;

* `--volume werf:/home/build/.werf`.

If the host to run CI jobs has Linux kernel version 5.12 or lower, install `fuse` on the host and configure Runner so that the containers you create have the optional parameter `--device /dev/fuse`.

### Configuring the container registry

[Enable garbage collection]({{ "/docs/v2/usage/cleanup/cr_cleanup.html#container-registrys-garbage-collector" | relative_url }}) for your container registry.

### Preparing the system for cross-platform building (optional)

> This step only needed to build images for platforms other than host platform running werf.

Register emulators on your system using qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
