### Requirements

- GitLab;

- Host to install the GitLab Runner, with:

  * [Docker Engine](https://docs.docker.com/engine/install/).

### Installing the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html) to install the GitLab Runner on its dedicated host.

### Registering the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/register/index.html) to register the GitLab Runner in GitLab; set Docker as the executor and any image as the image (e.g., `alpine`).

### Configuring the GitLab Runner

On the GitLab Runner host, open its `config.toml` configuration file and add the following options to the GitLab Runner you registered earlier:

```toml
[[runners]]
  name = "<name of the registered Runner>"
  [runners.docker]
    security_opt = ["seccomp:unconfined", "apparmor:unconfined"]
    volumes = ["/home/build/.werf"]
```

If the GitLab Runner host runs Linux kernel version 5.12 or lower, install `fuse` on the host and add one more option to the `config.toml` file:

```toml
[[runners]]
  name = "<name of the registered Runner>"
  [runners.docker]
    devices = ["/dev/fuse"]
```

You may also want to perform [additional configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html) of the GitLab Runner.

### Configuring the container registry

[Enable garbage collection]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#automating-the-container-registry-cleanup" | relative_url }}) for your container registry.

### Preparing the system for cross-platform building (optional)

> This step only needed to build images for platforms other than host platform running werf.

Register emulators on your system using qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```
