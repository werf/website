### Requirements

- GitLab;

- Host to run GitLab Runner on:

  - [Docker Engine](https://docs.docker.com/engine/install/);

- [Argo CD](https://argo-cd.readthedocs.io/en/stable/getting_started/#1-install-argo-cd).

### Installing GitLab Runner

Install GitLab Runner on its dedicated host by following the [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html).

### Registering GitLab Runner

Follow the [official instructions](https://docs.gitlab.com/runner/register/index.html) to register GitLab Runner in GitLab; specify Docker as the executor and any image as the image (e.g. `alpine`).

### Configuring GitLab Runner

On the GitLab Runner host, open its `config.toml` configuration file and add the following options to the GitLab Runner you registered earlier:

```toml
[[runners]]
  name = "<name of the Runner you registered>"
  [runners.docker]
    security_opt = ["seccomp:unconfined", "apparmor:unconfined"]
    volumes = ["/home/build/.werf"]
```

If the GitLab Runner host runs Linux kernel version 5.12 or lower, install `fuse` on the host and add the following extra option to the `config.toml` file:

```toml
[[runners]]
  name = "<name of the Runner you registered>"
  [runners.docker]
    devices = ["/dev/fuse"]
```

If needed, perform [additional configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html) of the GitLab Runner.

### Configuring the container registry

[Enable garbage collection](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) for your container registry.

### Preparing the system for cross-platform building (optional)

> This step is only needed to build images for platforms other than the host platform on which werf is being run.

Register emulators on your system using qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```

### Installing Argo CD Image Updater

Install Argo CD Image Updater with the ["continuous deployment of OCI Helm chart type application" patch](https://github.com/argoproj-labs/argocd-image-updater/pull/405):

```shell
kubectl apply -n argocd -f https://raw.githubusercontent.com/werf/3p-argocd-image-updater/master/manifests/install.yaml
```
