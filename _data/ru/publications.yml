i18n:
  default_btn_title: "Читать далее"
  habr_btn_title: "Прочитать на Хабре"
  medium_btn_title: "Прочитать на Medium"
  blog_btn_title: "Прочитать в блоге Флант"
  custom_url_btn_title_prefix: "Прочитать на "
  youtube_btn_title: "Посмотреть на YouTube"
  tproger_btn_title: "Прочитать на Tproger"

articles:
  #- title: TITLE
  #  url: URL
  #  habr_url: URL
  #  medium_url: URL
  #  youtube_url: URL
  #  img: ABSOLUTE PATH
  #  created: ISO format date, yyyy-mm-dd
  #  comment: COMMENT

  - title: "Автоматизируем сборку и деплой приложения в GitLab CI/CD: подробное руководство с примерами"
    habr_url: "https://habr.com/ru/companies/flant/articles/795475/"
    img: "/assets/images/publications/ru_220224.png"
    created: 2024-02-22
    comment: |
      <p>При разработке приложений рано или поздно наступает момент, когда заниматься развёртыванием вручную становится затратно и неудобно. Как следствие на помощь приходит автоматизация этого процесса с помощью специально настроенных пайплайнов непрерывной интеграции и непрерывной доставки (Continuous Integration & Continuous Delivery — CI/CD). Для разных систем управления репозиториями исходного кода существуют свои способы настройки CI/CD.</p>
  - title: "Настраиваем CI/CD с GitHub Actions и werf: инструкция для новичков"
    habr_url: "https://habr.com/ru/companies/flant/articles/803251/"
    img: "/assets/images/publications/ru_280324.png"
    created: 2024-03-28
    comment: |
      <p>В этой статье мы рассмотрим, как настроить пайплайн CI/CD в GitHub: подготовим репозиторий, зальём туда приложение, создадим файлы конфигурации GitHub Actions, в которых опишем, как собирать наше приложение и деплоить его в кластер Kubernetes, развёрнутый под управлением Deckhouse Kubernetes Platform. Деплоить будем с помощью Open Source CLI-утилиты werf. Она помогает организовать полный цикл доставки приложений в Kubernetes и рассматривает Git как единый источник истины для состояния развёрнутого приложения. Статья рассчитана на тех, кто только начинает свой путь в мире облаков и кластеризации.</p>
  - title: "Вышла werf 2.0: новый движок развёртывания Nelm и 300+ релизов за четыре года"
    habr_url: "https://habr.com/ru/companies/flant/articles/815023/"
    img: "/assets/images/publications/ru_160524.png"
    created: 2024-05-16
    comment: |
      <p>Четыре года мы развивали и улучшали werf 1.2, но теперь наконец‑то выпустили стабильную werf 2.0. Причина простая — последовательно накопилось множество улучшений (300+ релизов!), а кроме того, мы доработали новый движок развёртывания Nelm, и в werf 2.0 это единственный движок. Старый движок удалён. Nelm обратно совместим с Helm 3, поэтому никаких особых изменений в чартах не потребуется — они будут развёртываться так же, как и раньше.</p>
  - title: "Организация стенда локальной разработки для самых маленьких с автоматической пересборкой приложения (фронтенд + бэкенд)"
    habr_url: "https://habr.com/ru/companies/flant/articles/771678/"
    img: "/assets/images/publications/ru_031123.png"
    created: 2023-11-03
    comment: |
      <p>Вносить изменения в код приложения и тут же автоматически получать задеплоенные изменения, чтобы быстро тестировать его, — мечта разработчика. В этой статье мы посмотрим, как реализовать такой подход для небольшого приложения с фронтендом и бэкендом: организуем два варианта локального стенда на базе minikube или Docker с автоматическим развертыванием всех изменений или только закоммиченых в Git.<br><br>Бэкенд приложения напишем на Go, а фронтенд — на Vue.js. Все это позволит быстро запускать проект для тестирования прямо во время разработки, что, несомненно, повысит удобство работы с приложением.</p>
  - title: "Установка Deckhouse в kind: пробуем K8s-платформу на ноутбуке — без серверов и облаков"
    habr_url: "https://habr.com/ru/companies/flant/articles/767872/"
    img: "/assets/images/publications/ru_121023.png"
    created: 2023-10-12
    comment: |
      <p>Чтобы попробовать Kubernetes-платформу Deckhouse в деле, придется найти мощный сервер, пространство у облачного провайдера или несколько машин и прокси-сервер. Но что делать, если хочется просто потестировать Deckhouse, а технических возможностей для этого нет? Конечно же, установить Deckhouse в kind — ведь для этой задачи сгодится даже ноутбук, а на выходе у нас будет рабочая инсталляция Kubernetes-платформы, правда, с некоторыми ограничениями.</p>
  - title: "Разворачиваем приложение в кластере Kubernetes под управлением Deckhouse c помощью werf"
    habr_url: "https://habr.com/ru/companies/flant/articles/759040/"
    img: "/assets/images/publications/ru_120923.png"
    created: 2023-09-12
    comment: |
      <p>В статье мы рассмотрим, как подступиться к миру Kubernetes в первый раз — развернуть кластер под управлением платформы Deckhouse, разработать и подготовить приложение, развернуть его с помощью утилиты werf, предназначенной для построения рабочего процесса по принципам CI/CD, а также настроить сертификаты для доступа по HTTPS.</p>
  - title: "Появился бесплатный самоучитель по CI/CD и Kubernetes для Go-разработчиков от команды werf"
    habr_url: "https://habr.com/ru/companies/flant/news/752166/"
    img: "/assets/images/publications/ru_030823.png"
    created: 2023-08-03
    comment: |
      <p>Мы давно выпускаем практичные самоучители по CI/CD и Kubernetes для разработчиков. В них на примере конкретного фреймворка или языка мы пошагово рассказываем, как поднять свой Kubernetes-кластер, написать и задеплоить приложение, выстроить CI/CD-пайплайн. В качестве основного инструмента используем werf.<br><br>Теперь появился и гайд по Go.</p>
  - title: "Когда хочется больше: пишем кубовый оператор"
    habr_url: "https://habr.com/ru/articles/708522/"
    img: "/assets/images/publications/ru_311222.jpeg"
    created: 2022-12-31
    comment: |
      <p>Итак, некоторое время назад я писал статью о том, как мы переехали на werf со скрипта. По большому счёту, это продолжение той истории. Задача встала такая: нужно максимально автоматизировано разворачивать свежее приложение на нескольких кластерах Kubernetes, которое уже имеет обвязку для деплоя в виде werf. После некоторых изысканий, попыток использовать "коробочные" решения самой верфи и куба, я понял, что придётся написать собственный оператор, чтобы получить прям 100% покрытия всех "хотелок".</p>
  - title: "Ныряем в готовые кластеры Kubernetes с Deckhouse и werf"
    habr_url: "https://habr.com/ru/companies/selectel/articles/706372/"
    img: "/assets/images/publications/ru_201222.png"
    created: 2022-12-20
    comment: |
      <p>Российские облачные провайдеры начали предоставлять неплохие managed-решения для Kubernetes. Однако многие из них требуют доводки до ума и установки большого количества компонентов, направленных на сбор логов, мониторинг и доступ к кластеру. Это вынуждает пользователей собирать свой собственный бандл с Prometheus, Grafana и т.д., что крайне неудобно и требует дополнительных усилий.<br><br>Вот и я, столкнувшись с Managed Kubernetes от Selectel, захотел использовать что-то готовое, желательно от российских разработчиков. Я обратил внимание на платформу Deckhouse, которую к тому моменту можно уже было ставить в готовые кластеры k8s. В этой статье я расскажу про свой путь интеграции D8 и werf в инфраструктуру Selectel и те проблемы, с которыми столкнулся в процессе.</p>
  - title: "Hands-on lab on deploying to Kubernetes with werf"
    custom_urls:
      - service_name: "CloudYuga"
        url: "https://cloudyuga.guru/blogs/werf-deploy"
    img: "/assets/images/publications/en_200622.png"
    created: 2022-06-20
    comment: |
      <p>В этой англоязычной интерактивной лабораторной работе, запущенной непосредственно в вашем веб-браузере, можно узнать, как легко развертывать приложения в Kubernetes с помощью werf.</p>
  - title: "Simple End to End GitOps with Werf"
    custom_urls:
      - service_name: "KLLRCODA"
        url: "https://killercoda.com/jarns-zeiher/scenario/Simple-End-to-End-GitOps-with-Werf"
    img: "/assets/images/publications/ru_130723.jpg"
    created: 2023-07-13
    comment: |
      <p>Это англоязычное интерактивное руководство познакомит вас с подходом GitOps и GitOps-агентом werf.
      <br><br>
      Пройдя его, вы получите представление об основных идеях GitOps и узнаете, как с помощью werf автоматически (по коммиту) развертывать приложения в различные окружения (development, production).</p>
  - title: "Родительский helm chart для проектов + werf"
    habr_url: "https://habr.com/ru/articles/734922/"
    img: "/assets/images/publications/ru_150523.png"
    created: 2023-05-14
    comment: |
      <p>В данном методе используется инструмент werf от компании Флант для сборки и доставки приложения и их накопленные знания конфигураций CI/CD и деплоя приложений в K8s.</p>
  - title: "Canary-релизы в Kubernetes на базе Ingress-NGINX Controller"
    habr_url: "https://habr.com/ru/company/flant/blog/697030/"
    img: "/assets/images/publications/ru_031122.png"
    created: 2022-11-03
    comment: |
      <p>Тема «канареечных» (canary) релизов поднималась в нашем блоге уже не раз — см. ссылки в конце статьи. Но не будет лишним напомнить, зачем они нужны.
      <br><br>
      Canary-развертывание используется, чтобы протестировать новую функциональность на отдельной группе пользователей. Группа выделяется по определенному признаку. Тест при этом не должен затрагивать работу основной версии приложения и его пользователей. Нагрузка между двумя версиями приложения должна распределяться предсказуемо.
      <br><br>
      Canary-релизы достаточно просто реализуются на уровне Ingress-контроллеров. В статье рассмотрен практический пример настройки таких релизов в Kubernetes на базе Ingress NGINX Controller.</p>
  - title: "Задаём порядок деплоя ресурсов в Kubernetes с помощью werf/Helm"
    habr_url: "https://habr.com/ru/company/flant/blog/682804/"
    img: "/assets/images/publications/ru_020922.png"
    created: 2022-09-02
    comment: |
      <p>При деплое в Kubernetes часто требуется выкатывать ресурсы в определённом порядке, а иногда и дожидаться готовности сторонних ресурсов. Например, сначала нужно запустить БД, дождаться создания динамического Secret'а сторонним оператором, потом выполнить инициализацию/миграции БД, а уже затем запустить само приложение.
      <br><br>
      Рассмотрим, как решать такие задачи с помощью Helm, а также сравним с более быстрым и удобным вариантом, который предлагает Open Source-утилита werf.</p>
  - title: "werf — наша Open Source-утилита для CI/CD — стала проектом CNCF"
    habr_url: "https://habr.com/ru/company/flant/news/t/715180/"
    img: "/assets/images/publications/ru_070223.png"
    created: 2023-02-07
    comment: |
      <p>Рады официально сообщить, что werf пополнила ряды sandbox-проектов международной некоммерческой организации CNCF (Cloud Native Computing Foundation). Отныне проект будет развиваться усилиями глобального Open Source-сообщества, которое занимается Kubernetes, Helm и другими cloud native-решениями.</p>
  - title: "Запуск одноразовых задач и отладка образов прямо в Kubernetes-кластере с помощью werf"
    habr_url: "https://habr.com/ru/company/flant/blog/671960/"
    img: "/assets/images/publications/ru_010722.png"
    created: 2022-07-01
    comment: |
      <p>Какие задачи пользователю нужно выполнять в рамках CI-пайплайна или при локальной разработке? Среди них может быть что угодно, но самое очевидное — это, наверное, запуск линтеров, всевозможных unit-тестов и получение покрытия и других отчетов по результатам выполнения команды. Также при разработке и отладке может быть полезен интерактивный режим, который позволит быстрее разобраться в проблеме или проверить гипотезу.
      <br><br>
      Мы рассмотрим «классическое» решение этой задачи штатными средствами, а затем — простой пример, как Open Source-утилита werf помогает сократить трудозатраты на выполнение этих действий. Такой подход позволяет перенести нагрузку со сборочной или локальной машины в кластер Kubernetes, что дает возможность упростить масштабирование и обслуживание инфраструктуры, а также избавиться от зависимости от Docker.</p>
  - title: "GitLab + K8s + Werf"
    habr_url: "https://habr.com/ru/post/679826/"
    img: "/assets/images/publications/ru_290722.png"
    created: 2022-07-29
    comment: |
      <p>Всем привет! Это мой первый пост на Хабре. Хотел написать сюда давно, первый блин комом - не бейте.
      <br><br>
      Сегодня хочу рассказать о связке GitLab + K8S + Werf и как с помощью него быстро собрать и задеплоить свое приложение в одну команду. Этот пост будет иметь формат мини-туториала.
      <br><br>
      Думаю большинство набредших на эту статью знают, что такое GitLab и Kubernetes. Не знаете - гугл в помощь. В этой статье это out of scope.
      <br><br>
      Что такое Werf? Werf - это утилита, объединяющая CI/CD системы (типа GitLab, GitHub Actions), docker и helm в одном флаконе и позволяющая одной командой собрать образ контейнера, запушить его в репозиторий контейнеров и задеплоить с помощью helm.</p>
  - title: "Собираем и деплоим в Kubernetes приложение на Node.js с помощью werf"
    tproger_url: "https://tproger.ru/articles/kubernetes-node-js-werf/"
    img: "/assets/images/publications/ru_200622.png"
    created: 2022-06-23
    comment: |
      <p>В статье будет рассмотрено, как собрать Docker-контейнер Node.js-приложения и затем развернуть его в Kubernetes-кластере. Также рассмотрим, как можно легко накатывать изменения в коде и инфраструктуре, а также правильную организацию раздачи asset’ов, подняв для этого перед приложением reverse proxy-сервер.
      <br><br>
      В качестве замены K8s-кластеру воспользуемся minikube, это позволит малыми затратами подготовить локальное окружения для работы с werf.</p>
  - title: "Со скрипта на «верфь»"
    habr_url: "https://habr.com/ru/post/673014/"
    img: "/assets/images/publications/ru_230622.png"
    created: 2022-06-23
    comment: |
      <p>Использование того или иного продукта в проекте - это всегда попытка найти лучшее решение, балансируя между ограниченным бюджетом, возможностями роста практически по любому сценарию и высотой "порога входа". Существует много продуктов, которые связаны с контейнерами, что выбрать подходящий инструмент становится всё сложнее и сложнее, а community с "промытыми мозгами" и мышлением "ёжиков жрущих кактус" только добавляет сложности (хотя в противовес оным есть хейтеры, которые наоборот обгадят решение, просто потому что в своё время оно им не подошло).
      <br><br>
      В целом, чтобы выбрать нужное решение чаще всего приходится поднять лабу, которая покроет 90% задач, чтобы понять насколько решение подходящее, а это значит пройти какую-то боль, потратить время и деньги. Но ещё помогают статьи, в которых рассматриваются частные случаи внедрения и подбор инструментов, чтобы научиться на чужих ошибках через объективный взгляд со стороны. Надеюсь, эта статья о том, почему и как мы пришли к решению с werf, поможет кому-то подобрать инструмент для своих нужд.</p>
  - title: "Новые возможности werf: CI/CD на основе werf и Argo CD"
    habr_url: "https://habr.com/ru/company/flant/blog/666100/"
    img: "/assets/images/publications/ru_180522.png"
    created: 2022-05-18
    comment: |
      <p>В этой статье мы рассмотрим новый экспериментальный режим совместной работы Open Source-утилиты werf и инструмента для непрерывной доставки Argo CD, объединяющий в себе возможности и удобства обоих проектов в рамках одного CI/CD-процесса. Сейчас идет активная разработка этих возможностей werf, но в первом приближении функционал уже доступен и готов к использованию.</p>
  - title: "Запуск werf в GitLab CI/CD без Docker-сервера"
    habr_url: "https://habr.com/ru/company/flant/blog/649551/"
    img: "/assets/images/publications/ru_070222.png"
    created: 2022-02-07
    comment: |
      <p>В этой статье рассмотрен новый экспериментальный режим работы werf — Open Source-утилиты для сборки приложений и их деплоя в Kubernetes, — в котором не требуется наличие Docker-сервера. Мы покажем, как убедиться, что этот режим будет работать на вашей машине, соберем первый образ и научимся использовать Kubernetes executor для автоматизации сборки в GitLab CI/CD.</p>
  - title: "Локальная разработка в Kubernetes с помощью werf 1.2 и minikube"
    habr_url: "https://habr.com/ru/company/flant/blog/597277/"
    img: "/assets/images/publications/ru_140122.png"
    created: 2022-01-14
    comment: |
      <p>В этой статье на примере простого приложения будут описаны подготовка и развертывание инфраструктуры для локальной разработки с Kubernetes и последующий запуск проекта в этом окружении.</p>
  - title: "Первые шаги с werf: собираем и деплоим простое приложение в Kubernetes"
    habr_url: "https://habr.com/ru/company/flant/blog/597001/"
    img: "/assets/images/publications/ru_241221.png"
    created: 2021-12-24
    comment: |
      <p>В этой статье мы рассмотрим, как с помощью Open Source-утилиты werf собрать Docker-образ простейшего приложения и развернуть его в кластере Kubernetes, а также с легкостью накатывать изменения в его коде и инфраструктуре.</p>
  - title: "Представляем онлайн-самоучитель по Kubernetes и деплою с werf для разработчиков"
    habr_url: "https://habr.com/ru/company/flant/blog/596981/"
    img: "/assets/images/publications/ru_221221.png"
    created: 2021-12-22
    comment: |
      <p>Рады представить новую версию онлайн-самоучителя по werf, нашей CI/CD-утилите с открытым кодом!

      Общая идея самоучителя — познакомить разработчиков с Kubernetes, показав на простых приложениях (готовы примеры для Ruby on Rails, Node.js и Laravel), как можно развертывать приложения в K8s с помощью werf. Это отличная возможность быстро освоить практические основы K8s без погружения в его объемную теоретическую базу. Если вы еще не решили, как провести новогодние каникулы с пользой, — вот вам идея.</p>
  - title: "werf v1.2 — стабильный релиз Open Source-утилиты для доставки приложений в Kubernetes"
    habr_url: "https://habr.com/ru/company/flant/blog/592715/"
    img: "/assets/images/publications/ru_141221.png"
    created: 2021-12-14
    comment: |
      <p>werf — это CLI-утилита с открытым кодом для сборки приложений и их деплоя в Kubernetes. С версией v1.2 она получила множество изменений и улучшений, которые мы так тщательно тестировали и дорабатывали, что релиз долгое время — с января 2021-го — находился в статусе Early-Access. Наконец, мы рады объявить о его переводе в категорию Stable!</p>
  - title: "werf vs Docker. Чем лучше собирать образы"
    habr_url: "https://habr.com/ru/company/flant/blog/565598/"
    img: "/assets/images/publications/ru_020721.png"
    created: 2021-07-02
    comment: |
      <p>Продолжаем серию публикаций «werf vs...», которая вдохновлена часто задаваемыми вопросами. В первой статье мы объяснили, <a target="_blank" rel="noopener nofollow" href="https://habr.com/ru/company/flant/blog/554892/">чем werf отличается от Helm</a>. Теперь черед сравнения с еще более базовой утилитой — Docker.</p>
  - title: "Review- или динамические окружения. Теория и практика в Kubernetes"
    habr_url: "https://habr.com/ru/company/flant/blog/571482/"
    img: "/assets/images/publications/ru_090821.png"
    created: 2021-08-09
    comment: |
      <p>Статья посвящена так называемым review-окружениям, реализуемым в рамках кластеров Kubernetes. В статье рассказывается для чего нужны и/или обычно используют review-окружения, как сделать pipeline c review-окружением в GitLab CI/CD, какие могут быть потенциальные проблемы и способы их решения, а также, как тут может помочь werf.</p>
  - title: "werf vs. Helm: корректно ли их вообще сравнивать?"
    habr_url: "https://habr.com/ru/company/flant/blog/554892/"
    img: "/assets/images/publications/ru_290421.png"
    created: 2021-04-29
    comment: |
      <p>Эта статья — развернутый ответ на вопрос, который нам периодически задают: чем werf отличается от Helm? На первый взгляд можно предположить, что задача у них примерно одинаковая: автоматизировать деплой приложений в Kubernetes. Но всё, конечно, немного сложнее ...</p>
  - title: "Настраиваем Continuous Integration для Jenkins и Bitbucket с werf"
    habr_url: "https://habr.com/ru/company/flant/blog/529750/"
    img: "/assets/images/publications/ru_181220.png"
    created: 2020-12-18
    comment: |
      <p>Практический пример по организации CI в Jenkins и Bitbucket.</p>
  - title: "Запускаем тесты на GitLab Runner с werf — на примере SonarQube"
    habr_url: "https://habr.com/ru/company/flant/blog/526702/"
    img: "/assets/images/publications/ru_091120.png"
    created: 2020-11-09
    comment: |
      <p>Для запуска тестов (и других утилит для анализа кода) есть два подхода: непосредственно в кластере Kubernetes или  вне его (например, на сервере сборки/деплоя или локально). В статье рассказывается про их запуск вне K8s на примере SonarQube-тестов в рамках пайплайна, построенного на базе GitLab CI/CD с использованием werf.</p>
  - title: "Легковесный сборщик логов на примере FluentD в MicroK8s через WERF"
    medium_url: "https://gievoiviktor.medium.com/%D0%BB%D0%B5%D0%B3%D0%BA%D0%BE%D0%B2%D0%B5%D1%81%D0%BD%D1%8B%D0%B9-%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA-%D0%BB%D0%BE%D0%B3%D0%BE%D0%B2-%D0%BD%D0%B0-%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D0%B5-fluentd-%D0%B2-microk8s-34c92c16c2aa"
    img: "/assets/images/publications/ru_291020.png"
    created: 2020-10-29
    comment: |
      <p>Практическая статья, автор которой делится своим опытом решения инфраструктурной задачи по сбору логов с помощью FluentD в «домашнем» Kubernetes-кластере (MicroK8s). Он использует werf для сборки и доставки образа (с FluentD), Docker Hub для его хранения и GitHub Actions для запуска своего пайплайна.</p>
  - title: "Проблема «умной» очистки образов контейнеров и её решение в werf"
    habr_url: "https://habr.com/ru/company/flant/blog/522024/"
    img: "/assets/images/publications/ru_061020.png"
    created: 2020-10-06
    comment: |
      <p>В статье рассмотрена проблематика очистки образов, которые накапливаются в container registry (Docker Registry и его аналогах) в реалиях современных CI/CD-пайплайнов для cloud native-приложений, доставляемых в Kubernetes. Приведены основные критерии актуальности образов и вытекающие из них сложности при автоматизации очистки, сохранения места и удовлетворения потребностям команд. Наконец, на примере нашего Open Source-проекта werf мы расскажем, как эти сложности можно преодолеть.</p>
  - title: "Организация распределенного CI/CD с помощью werf"
    habr_url: "https://habr.com/ru/company/flant/blog/504390/"
    img: "/assets/images/publications/ru_020620.png"
    created: 2020-06-02
    comment: |
      <p>Сегодня мы с радостью сообщаем, что werf научилась работать в распределенном режиме, начиная с версии v1.1.10 (доступна в каналах v1.1 alpha, beta, ea и stable). Для его подключения требуется минимум усилий...</p>
  - title: "Полная поддержка популярных реализаций Docker Registry в werf"
    habr_url: "https://habr.com/ru/company/flant/blog/496992/"
    img: "/assets/images/publications/ru_160420.png"
    created: 2020-04-16
    comment: |
      <p>Все популярные реализации container registry поддерживают <a target="_blank" rel="noopener nofollow" href="https://docs.docker.com/registry/spec/api/">Docker Registry HTTP API</a> и позволяют использовать одни и те же инструменты для работы с ними. Тем не менее, часть реализаций имеет свои особенности и ограничения, а значит — если вам нужно их поддерживать в своем инструментарии для CI/CD, — с этой спецификой необходимо считаться. Так у нас и случилось в процессе работы над GitOps-утилитой
      werf, когда мы захотели улучшить в ней то, как обеспечивается жизненный цикл образов.</p>
  - title: "Content-based tagging в сборщике werf: зачем и как это работает?"
    habr_url: "https://habr.com/ru/company/flant/blog/495112/"
    img: "/assets/images/publications/ru_030420.png"
    created: 2020-04-03
    comment: |
      <p>werf — наша GitOps CLI-утилита с открытым кодом для сборки и доставки приложений в Kubernetes. В <a href="https://habr.com/ru/company/flant/blog/493170/" target="_blank" rel="noopener nofollow">релизе v1.1</a> была представлена новая возможность в сборщике образов: тегирование образов по содержимому или <i>content-based tagging</i>. До сих пор типичная схема тегирования в werf предполагала тегирование Docker-образов по Git-тегу, Git-ветке или Git-коммиту. Но у всех этих схем есть недостатки, которые полностью решаются новой стратегией тегирования. Узнайте подробности о ней и чем она так хороша.</p>
  - title: "Релиз werf 1.1: улучшения в сборщике сегодня и планы на будущее"
    habr_url: "https://habr.com/ru/company/flant/blog/493170/"
    img: "/assets/images/publications/ru_240320.png"
    created: 2020-03-24
    comment: |
      <p>werf — наша GitOps CLI-утилита с открытым кодом для сборки и доставки приложений в Kubernetes. Как и обещали, <a href="https://habr.com/ru/company/flant/blog/481306/" target="_blank" rel="noopener nofollow">выход версии v1.0</a> знаменовал начало добавления в werf новых возможностей и пересмотра привычных подходов. Теперь мы рады представить релиз v1.1, который является большим шагом в развитии и заделом на будущее <i>сборщика</i> werf.</p>
  - title: "Динамическая сборка и деплой Docker-образов с werf на примере сайта версионированной документации"
    habr_url: "https://habr.com/ru/company/flant/blog/478690/"
    img: "/assets/images/publications/ru_160120.png"
    created: 2020-01-16
    comment: |
      <p>Мы уже не раз рассказывали про свой GitOps-инструмент werf, а в этот раз хотели бы поделиться опытом сборки сайта с документацией самого проекта — werf.io (его русскоязычная версия — ru.werf.io). Это обычный статический сайт, однако его сборка интересна тем, что построена с использованием динамического количества артефактов.</p>
  - title: "Представляем werf 1.0 stable: при чём тут GitOps, статус и планы"
    habr_url: "https://habr.com/ru/company/flant/blog/481306/"
    img: "/assets/images/publications/ru_140120.png"
    created: 2020-01-14
    comment: |
      <p>В этой приуроченной к релизу статье мы подробнее рассмотрим, что предоставляет и не предоставляет данная версия, а также наши планы на будущие версии. Но начнём мы с того, что разберёмся в понимании термина «GitOps» и роли werf в процессах непрерывной интеграции и доставки приложений (CI/CD).</p>
  - title: "Запуск команд в процессе доставки нового релиза приложения в Kubernetes"
    habr_url: "https://habr.com/ru/company/flant/blog/476320/"
    img: "/assets/images/publications/ru_171219.png"
    created: 2019-12-17
    comment: |
      <p>В своей практике мы часто сталкиваемся с задачей адаптации клиентских приложений для запуска в Kubernetes. При проведении данных работ возникает ряд типовых проблем. Одну из них мы недавно осветили в статье <a target="_blank" rel="noopener nofollow" href="https://habr.com/ru/company/flant/blog/471582/">Локальные файлы при переносе приложения в Kubernetes</a>, а о другой, связанной уже с процессами CI/CD, — расскажем в этом материале.</p>
  - title: "3-way merge в werf: деплой в Kubernetes с Helm «на стероидах»"
    habr_url: "https://habr.com/ru/company/flant/blog/476646/"
    img: "/assets/images/publications/ru_211119.png"
    created: 2019-11-21
    comment: |
      <p>Что такое 3-way-merge-патчи, как люди пришли к подходу с их генерацией и почему они важны в CI/CD-процессах с инфраструктурой на базе Kubernetes? Что представляет собой 3-way-merge в werf, какие режимы используются по умолчанию и как этим управлять.</p>
  - title: "Сборка и деплой однотипных микросервисов с werf и GitLab CI"
    habr_url: "https://habr.com/ru/company/flant/blog/469541/"
    img: "/images/publications/ru_071019.png"
    created: 2019-10-07
    comment: |
      <p>Раннее мы публиковали статью <!-- spell-check-ignore --><a target="_blank" rel="noopener nofollow" href="https://habr.com/ru/company/flant/blog/340996/">«Сборка проектов с GitLab CI: один .gitlab-ci.yml для сотни приложений»</a><!-- end-spell-check-ignore -->, а теперь расскажем о решении схожей задачи сегодня. Новый материал — о том, как можно построить CI/CD-процессы для большого количества однотипных приложений с появлением include в <!-- spell-check-ignore --><i>.gitlab-ci.yml</i><!-- end-spell-check-ignore --> и приходом werf на замену dapp.</p>
  - title: "Использование werf для выката комплексных Helm-чартов"
    habr_url: "https://habr.com/ru/company/flant/blog/468049/"
    img: "/images/publications/ru_240919.png"
    created: 2019-09-24
    comment: |
      <p>Статья посвящена новым командам для работы с зависимостями чарта и чарт-репозиториями.</p>
  - title: "Поддержка monorepo и multirepo в werf и при чём здесь Docker Registry"
    habr_url: "https://habr.com/ru/company/flant/blog/465131/"
    img: "/images/publications/ru_300819.png"
    created: 2019-08-30
  - title: "Собирать Docker-образы в werf теперь можно и по обычному Dockerfile"
    habr_url: "https://habr.com/ru/company/flant/blog/463613/"
    img: "/images/publications/ru_210819.png"
    created: 2019-08-21
    comment: |
      <p>Лучше поздно, чем никогда. Или как мы чуть не допустили серьёзную ошибку, не имея поддержки обычных Dockerfiles для сборки образов приложения.</p>
  - title: "werf — наш инструмент для CI/CD в Kubernetes (обзор и видео доклада)"
    habr_url: "https://habr.com/ru/company/flant/blog/460351/"
    created: 2019-08-01
    img: "/images/publications/ru_460351.jpg"
    comment: |
      <p>27 мая в главном зале конференции DevOpsConf 2019, проходящей в рамках фестиваля <a target="_blank" rel="noopener nofollow" href="http://ritfest.ru/2019/">РИТ++ 2019</a>, в рамках секции «Непрерывная поставка», прозвучал доклад «werf — наш инструмент для CI/CD в Kubernetes». В нём рассказывается о тех <b>проблемах и вызовах, с которыми сталкивается каждый при деплое в Kubernetes</b>, а также о нюансах, которые могут быть заметны не сразу. Разбирая возможные пути решения, мы показываем, как это реализовано в Open Source-инструменте <a target="_blank" rel="noopener nofollow" href="https://github.com/werf/werf">werf</a>.</p>
  - title: "Как победить дракона: переписываем вашу программу на Golang"
    habr_url: "https://habr.com/ru/company/flant/blog/437044/"
    img: "/images/publications/ru_240119.jpg"
    created: 2019-01-24
    comment: |
      <p>Так случилось, что ваша программа написана на скриптовом языке — например, на Ruby — и встала необходимость переписать ее на Golang.</p>
  - title: "Сборка проектов с werf (dapp). Часть 2: JavaScript (frontend)"
    habr_url: "https://habr.com/company/flant/blog/359204/"
    created: 2018-05-30
    img: "/images/publications/ru_300518.jpg"
    comment: |
      <p>Этот материал продолжает цикл о сборке Docker-образов для приложений на различных языках программирования с помощью утилиты <a target="_blank" rel="noopener nofollow" href="https://github.com/flant/dapp">werf (dapp)</a>. Поговорим о приложениях на JavaScript. Для начала это будет frontend-приложение, а в следующей части планируется рассказать о сборке backend'а и запуске всего в Kubernetes.</p>
      <p>В качестве иллюстрации будут использованы приложения <!-- spell-check-ignore --><a target="_blank" rel="noopener nofollow" href="https://github.com/Snipa22/nodejs-pool">nodejs-pool</a> и <a target="_blank" rel="noopener nofollow" href="https://github.com/mesh0000/poolui">poolui</a><!-- end-spell-check-ignore -->. Да-да, подготовим к запуску в Kubernetes свой майнинг-пул с блокчейном и выплатами!</p>
  - title: "Возможности werf (dapp), которые делают жизнь проще"
    habr_url: "https://habr.com/company/flant/blog/354866/"
    created: 2018-05-07
    img: "/images/publications/ru_070518.gif"
    comment: |
      <p>В статье представлен (и продемонстрирован в коротких видеороликах) инструментарий, облегчающий разработку и отладку конфигураций с <a target="_blank" rel="noopener nofollow" href="https://github.com/flant/dapp">werf (dapp)</a> — Open Source-утилитой, которую мы ежедневно используем при построении и сопровождении процессов CI/CD.</p>

  - title: "Linux-дистрибутив from scratch для сборки Docker-образов — наш опыт с dappdeps"
    habr_url: "https://habr.com/company/flant/blog/352432/"
    created: 2018-04-03
    img: "/images/publications/ru_030418.jpg"
    comment: |
      <p>Сборка образов для Docker на основе базового образа, как правило, предполагает вызов команд в окружении этого базового образа. Например — вызов команды apt-get, которая есть в базовом образе, для установки новых пакетов.</p>
      <p>Часто возникает необходимость доустановить в базовую систему некоторый набор утилит, с помощью которых происходит установка или сборка некоторых файлов, которые требуются в итоговом образе. Например, чтобы собрать Go-приложение, надо установить компилятор Go, положить все исходные коды приложения в базовом образе, скомпилировать требуемую программу. Однако в итоговом образе требуется лишь скомпилированная программа без всего набора утилит, который использовался для компиляции этой программы.</p>
      <p>Проблема известная: одним из путей её решения может быть сборка вспомогательного образа и перенос файлов из вспомогательного образа в результирующий. Для этого появились <a target="_blank" rel="noopener nofollow" href="https://docs.docker.com/develop/develop-images/multistage-build/">Docker multi-stage builds</a> или образы-артефакты в dapp. И данный подход идеально решает проблему подобную переносу результатов компиляции исходных кодов в итоговый образ. Однако он не решает все возможные проблемы…</p>

  - title: "Дождались: поддержка YAML и Ansible (без коров) в werf (dapp)"
    habr_url: "https://habr.com/company/flant/blog/351838/"
    created: 2018-03-23
    img: "/images/publications/ru_230318.jpg"
    comment: |
      <p>В начале этого года мы посчитали, что наша Open Source-утилита для сопровождения процессов CI/CD — werf (dapp) версии 0.25 — обладает достаточным набором функций и была начата работа над нововведениями. В версии 0.26 появился синтаксис YAML, а Ruby DSL был объявлен классическим (далее перестанет поддерживаться вовсе). В следующей версии, 0.27, основным нововведением можно считать появление сборщика с Ansible. Пришло время рассказать об этих новинках подробнее.</p>

  - title: "Сборка проектов с werf (dapp). Часть 1: Java"
    habr_url: "https://habr.com/company/flant/blog/348436/"
    created: 2018-02-14
    img: "/images/publications/ru_140218.jpg"
    comment: |
      <p>Эта статья — начало цикла о сборке <a target="_blank" rel="noopener nofollow" href="https://github.com/flant/dapp">werf</a>'ом (dapp) приложений на различных языках, платформах, технологических стеках. Предыдущие статьи про dapp были больше обзорными, описывали возможности dapp. Теперь же пора поговорить более предметно и поделиться конкретным опытом работы с проектами. В связи с недавним релизом <a target="_blank" rel="noopener nofollow" href="https://github.com/flant/dapp/releases/tag/0.26.2">dapp 0.26.2</a> я заодно покажу, как описывать сборку в YAML-файле.</p>
      <p>Описывать сборку буду на примере приложения из репозитория dockersamples — <!-- spell-check-ignore --><a target="_blank" rel="noopener nofollow" href="https://github.com/dockersamples/atsea-sample-shop-app">atsea-sample-shop-app</a><!-- end-spell-check-ignore -->. Это прототип небольшого магазина, построенный на React (фронт) и Java Spring Boot (бэкенд). В качестве БД используется PostgreSQL. Для большей похожести на рабочий проект добавлены реверсивный прокси на nginx и шлюз платежей в виде простого скрипта.</p>

  - title: "Сборка и дeплой приложений в Kubernetes с помощью werf (dapp) и GitLab CI"
    habr_url: "https://habr.com/company/flant/blog/345580/"
    created: 2017-12-27
    img: "/images/publications/ru_271217.jpg"
    comment: |
      <p>Чем werf (dapp) помогает в процессах CI/CD?</p>

  - title: "Лучшие практики CI/CD с Kubernetes и GitLab (Дмитрий Столяров, Флант, HighLoad++ 2017)"
    habr_url: "https://habr.com/company/flant/blog/345116/"
    youtube_url: "https://www.youtube.com/watch?v=G3nELxmECd8"
    created: 2017-11-07
    img: "/images/publications/ru_071117.jpg"
    comment: |
      <p>Доклад Дмитрия Столярова, технического директора компании «Флант», на конференции HighLoad++ 2017 (7 ноября 2017). Рассказывается о выстраивании процессов непрерывной интеграции и доставки (CI/CD) на базе GitLab CI и специфики их интеграции с инфраструктурой, управляемой Kubernetes.</p>

  - title: "Практика с werf (dapp). Часть 2. Деплой Docker-образов в Kubernetes с помощью Helm"
    habr_url: "https://habr.com/company/flant/blog/336170/"
    created: 2017-08-29
    img: "/images/publications/ru_290817.jpg"
    comment: |
      <p>Демонстрация работы werf (dapp) с кластером Kubernetes.</p>

  - title: "Практика с werf (dapp). Часть 1: Сборка простых приложений"
    habr_url: "https://habr.com/company/flant/blog/336212/"
    created: 2017-08-23
    img: "/images/publications/ru_230817.jpg"
    comment: |
      <p>Эта статья — ознакомительное руководство по сборке Docker-образов приложений с помощью нашей Open Source-утилиты <a target="_blank" rel="noopener nofollow" href="https://github.com/flant/dapp">werf (dapp)</a> <i>(подробнее о ней читайте в <a target="_blank" rel="noopener nofollow" href="https://habrahabr.ru/company/flant/blog/333682/">анонсе</a>)</i>. На примере двух простых приложений (с одним образом) рассмотрим, как могут быть задействованы некоторые из основных возможностей dapp и какой результат они дают.</p>

  - title: "Официально представляем werf (dapp) — DevOps-утилиту для сопровождения CI/CD"
    habr_url: "https://habr.com/company/flant/blog/333682/"
    img: "/images/publications/ru_190717.jpg"
    created: 2017-07-19
    comment: |
      <p>dapp — написанный на Ruby инструмент, созданный в компании «Флант» как Open Source-проект для реализации и сопровождения процессов CI/CD. Что он позволяет?</p>

  - title: "Наш опыт с Kubernetes в небольших проектах (Флант, RootConf 2017)"
    habr_url: "https://habr.com/company/flant/blog/331188/"
    youtube_url: "https://www.youtube.com/watch?v=G3nELxmECd8"
    img: "/images/publications/ru_060617.jpg"
    created: 2017-06-06
    comment: |
      <p>Доклад Дмитрия Столярова, технического директора компании «Флант», на конференции RootConf, проходившей в рамках фестиваля РИТ++ 2017 (6 июня 2017 г.). Посвящён устройству и основным возможностями Kubernetes и практике использования этой контейнерной системы в небольших проектах.</p>

  - title: "Собираем Docker-образы для CI/CD быстро и удобно вместе с werf (dapp) (обзор и видео)"
    habr_url: "https://habr.com/company/flant/blog/324274/"
    youtube_url: "https://www.youtube.com/watch?v=8R5UDg29Vic"
    img: "/images/publications/ru_280317.jpg"
    created: 2017-03-28
    comment: |
      <p>Доклад Дмитрия Столярова, технического директора компании «Флант», с конференции HighLoad++ 2016 (8 ноября 2016 г.). Посвящен сборке Docker-образов в контексте CI/CD (Continuous Integration, Continuous Delivery) и обзору основных возможностей Open Source-утилиты werf (dapp).</p>

  - title: "Практики Continuous Delivery с Docker (обзор и видео)"
    habr_url: "https://habr.com/company/flant/blog/322686/"
    youtube_url: "https://www.youtube.com/watch?v=mT5U862_ydU"
    img: "/images/publications/ru_280217.jpg"
    created: 2017-02-28
    comment: |
      <p>Доклад Дмитрия Столярова, технического директора компании «Флант» с конференции RootConf 2016 (31 мая 2016 г.). В нём были обобщены и систематизированы лучшие практики построения процесса Continuous Delivery (CD) с использованием Docker и других Open Source-продуктов.</p>
