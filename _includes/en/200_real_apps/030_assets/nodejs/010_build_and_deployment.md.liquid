
### Organizing files

We will use webpack to bundle static files. Currently, our application has one index page accessible at `/`. This page has existed since the start of the project.
Its contents are in the `/public/index.html` file. We will now add another page available at `/image`. 
We will also re-structure the `/public` directory and divide it into two parts: the pages (`pages`) and the files needed for the pages (`assets`).

```shell
$ tree public
public/
├── assets
│   ├── images
│   │   └── werf-logo.svg
│   ├── javascripts
│   │   ├── image.js
│   │   └── index.js
│   └── stylesheets
│       ├── image.css
│       └── style.css
└── pages
    ├── image.html
    └── index.html
```


HTML files will act as page templates. We will not cache pages because they are always available at fixed paths (`/`, `/image`), and we need to change them occasionally and quickly bring those changes to users. 
However, asset files will be assembled so that their names will change depending on their contents. This way, you can cache files in a browser for a long time and at the same time easily modify them. 
Once bundling is complete, you will see the following result in the `dist` directory (we will show you how to achieve it below):

```shell
$ tree dist/
├── css
│   ├── image.40428375b4e566574c8f.css
│   └── index.1e6f9f5ee05a92734053.css
├── image.html
├── index.html
├── js
│   ├── image.e67ef581c6705e6bd9a0.js
│   ├── index.e5a57023092221b727e0.js
│   └── runtime.f9a303951d184e8c1ce3.js
└── media
    └── 2c6aa8e8ef0b96213f30.svg
```

### Building static files

Let's install the following modules to build and bundle static files:

```shell
$ npm install --save-dev \
  webpack webpack-cli webpack-dev-middleware \
  html-webpack-plugin \
  css-loader mini-css-extract-plugin css-minimizer-webpack-plugin
```

- `webpack`, `webpack-cli` — for building static resources;
- `webpack-dev-middleware` — for serving the files emitted from webpack during development;
- `html-webpack-plugin` — for generating HTML pages with dynamic assets attaching;
- `css-loader` — for using CSS;
- `mini-css-extract-plugin` — for extracting CSS into separate files and caching them independently of JS;
- `css-minimizer-webpack-plugin` — for optimizing and minifying CSS (it works together with the `mode: "production"` parameter).

Let's add a build command to `package.json`: `"build": "webpack"` and a request handler for static files if the application is not running in `production` mode:

{% include snippetcut_example path="app.js" syntax="javascript" snippet="webpack-dev" examples=page.examples %}

Let's make sure that the server runs as expected and static files are being built. For this, assemble static files, run the server, and open the image page in the browser at [http://localhost:3000/image](http://localhost:3000/image):

```shell
$ npm run build && npm start
```

{% include snippetcut_example path="webpack.config.js" syntax="javascript" examples=page.examples %}

### Deploying static files and the application

Now that we have static files for the NGINX proxy and pages for the application server, we need to distribute static files between containers. The HTML files should end up in the app container, all other files — in the NGINX container.

{% include snippetcut_example path="Dockerfile" syntax="dockerfile" examples=page.examples %}

The NIGINX config will be added to the NGINX image during the build:

{% include snippetcut_example path=".werf/nginx.conf" syntax="nginx" examples=page.examples %}

Now, let's update `werf.yaml` so that werf can build two images (backend, frontend) instead of one:

{% include snippetcut_example path="werf.yaml" syntax="yaml" examples=page.examples %}

Add a new NGINX container to the application Deployment:

{% include snippetcut_example path=".helm/templates/deployment.yaml" syntax="yaml" examples=page.examples %}

Service and Ingress should now connect to NGINX's port 80 instead of 3000. This way, NGINX can serve static files and act as a proxy for application requests:

{% include snippetcut_example path=".helm/templates/service.yaml" syntax="yaml" examples=page.examples %}

{% include snippetcut_example path=".helm/templates/ingress.yaml" syntax="yaml" examples=page.examples %}
