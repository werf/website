<div class="tabs">
<a href="javascript:void(0)" class="tabs__btn tabs__system_restarted__btn active" onclick="openTab(event, 'tabs__system_restarted__btn', 'tabs__system_restarted__content', 'tab__system_restarted__minikube_macos_linux')">Linux / macOS</a>
<a href="javascript:void(0)" class="tabs__btn tabs__system_restarted__btn" onclick="openTab(event, 'tabs__system_restarted__btn', 'tabs__system_restarted__content', 'tab__system_restarted__minikube_windows')">Windows</a>
</div>

<div id="tab__system_restarted__minikube_windows" class="tabs__content tabs__system_restarted__content" markdown="1">
Let's start the minikube cluster we have already configured in the ["Preparing the environment"]({{ page.framework_id | append: "/100_basic/20_cluster.html" | relative_url }}) chapter:
```powershell
minikube start
```

Set the default Namespace so that you don't have to specify it every time you invoke `kubectl`:
```powershell
kubectl config set-context minikube --namespace=werf-guide-app
```

You will see the following output if the command completes successfully:
```shell
😄  minikube v1.20.0 on Ubuntu 20.04
✨  Using the docker driver based on existing profile
👍  Starting control plane node minikube in cluster minikube
🚜  Pulling base image ...
🎉  minikube 1.21.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.21.0
💡  To disable this notice, run: 'minikube config set WantUpdateNotification false'

🔄  Restarting existing docker container for "minikube" ...
🐳  Preparing Kubernetes v1.20.2 on Docker 20.10.6 ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/google_containers/kube-registry-proxy:0.4
    ▪ Using image k8s.gcr.io/ingress-nginx/controller:v0.44.0
    ▪ Using image registry:2.7.1
    ▪ Using image docker.io/jettech/kube-webhook-certgen:v1.5.1
    ▪ Using image docker.io/jettech/kube-webhook-certgen:v1.5.1
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🔎  Verifying registry addon...
🔎  Verifying ingress addon...
🌟  Enabled addons: storage-provisioner, registry, default-storageclass, ingress
🏄  Done! kubectl is now configured to use "minikube" cluster and "werf-guide-app" namespace by default
```

Make sure that the command output contains the following line:
```shell
Restarting existing docker container for "minikube"
```

Its absence means that a new minikube cluster was created instead of using the old one. In this case, repeat [all the steps]({{ page.framework_id | append: "/100_basic/20_cluster.html" | relative_url }}) required to install the environment using minikube.

Now run the command in the background PowerShell terminal (do not close its window):
```powershell
minikube tunnel --cleanup=true
```
</div>

<div id="tab__system_restarted__minikube_macos_linux" class="tabs__content tabs__system_restarted__content active" markdown="1">
Let's start the minikube cluster we have already configured in the ["Preparing the environment"]({{ page.framework_id | append: "/100_basic/20_cluster.html" | relative_url }}) chapter:
```shell
minikube start --namespace werf-guide-app
```

Set the default Namespace so that you don't have to specify it every time you invoke `kubectl`:
```shell
kubectl config set-context minikube --namespace=werf-guide-app
```

You will see the following output if the command completes successfully:
```shell
😄  minikube v1.20.0 on Ubuntu 20.04
✨  Using the docker driver based on existing profile
👍  Starting control plane node minikube in cluster minikube
🚜  Pulling base image ...
🎉  minikube 1.21.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.21.0
💡  To disable this notice, run: 'minikube config set WantUpdateNotification false'

🔄  Restarting existing docker container for "minikube" ...
🐳  Preparing Kubernetes v1.20.2 on Docker 20.10.6 ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/google_containers/kube-registry-proxy:0.4
    ▪ Using image k8s.gcr.io/ingress-nginx/controller:v0.44.0
    ▪ Using image registry:2.7.1
    ▪ Using image docker.io/jettech/kube-webhook-certgen:v1.5.1
    ▪ Using image docker.io/jettech/kube-webhook-certgen:v1.5.1
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🔎  Verifying registry addon...
🔎  Verifying ingress addon...
🌟  Enabled addons: storage-provisioner, registry, default-storageclass, ingress
🏄  Done! kubectl is now configured to use "minikube" cluster and "werf-guide-app" namespace by default
```

Make sure that the command output contains the following line:
```shell
Restarting existing docker container for "minikube"
```

Its absence means that a new minikube cluster was created instead of using the old one. In this case, repeat [all the steps]({{ page.framework_id | append: "/100_basic/20_cluster.html" | relative_url }}) required to install the environment from scratch using minikube.
</div>
