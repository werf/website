## Deploying a cluster

Choose the way you will install Kubernetes in your operating system:

<div class="tabs">
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn active" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_linux')">Linux: minikube</a>
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_macos')">macOS: minikube</a>
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_windows')">Windows: minikube</a>
{% comment %} TODO(lesikov): раскомментить как переработаю 20_cluster_has_cluster.md.
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__ihave')">Свой кластер</a>
{% endcomment %}
</div>

<div id="tab__install__minikube_linux" class="tabs__content tabs__install__content active" markdown="1">
{% include guides/100_basic/20_cluster/minikube_linux.md.liquid %}
</div>
<div id="tab__install__minikube_macos" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/minikube_macos.md.liquid %}
</div>
<div id="tab__install__minikube_windows" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/minikube_windows.md.liquid %}
</div>

{% comment %} TODO(lesikov): раскомментить как переработаю 20_cluster_has_cluster.md.liquid
<div id="tab__install__ihave" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/has_cluster.md.liquid %}
</div>
{% endcomment %}

## Testing

Execute the following command to check if the cluster is up and running:

```shell
curl http://werf-guide-app.test/ping
```

If it works, the NGINX Ingress Controller will return a 404 error:

```html
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
```

> Note that if your application is running already and has an Ingress configured to use the `werf-guide-app.test` domain, you will get a response from your application instead of a 404 error.

## Configuring the container registry

In this guide, we will use the Docker Hub container registry. However, you can use any other Registry that supports TLS and authentication ([GitHub container registry](https://github.com/features/packages), [GitLab container registry](https://docs.gitlab.com/ee/user/packages/container_registry/), etc.).

### Authorizing in Docker Hub
Create a [Docker Hub](https://hub.docker.com/signup) ID  and create a [private repository](https://hub.docker.com/repository/create) named `werf-guide-app`. We will store the built images in it.

Using the `docker login` command, log in to the new repository by entering the username and password of the Docker Hub user:
```shell
docker login
# Enter the name of the Docker Hub user
Username: <DOCKER HUB USERNAME>
# Enter the password of the Docker Hub user
Password: <DOCKER HUB PASSWORD>
```

If the login is successful, you will see the following message:
```shell
Login Succeeded
```

### Creating a Secret

In order to be able to use images from the *private* container registry, we need to create a Secret with user credentials. Note that the Secret must be located in the same namespace as the application. 

That's why we need to create a namespace for our application first:
```shell
kubectl create namespace werf-guide-app
```

You will see the following output:
```shell
namespace/werf-guide-app created
```

Next, create a Secret named `registrysecret` in the namespace:
```shell
kubectl create secret docker-registry registrysecret \
  --docker-server='https://index.docker.io/v1/' \
  --docker-username='<DOCKER HUB USERNAME>' \
  --docker-password='<DOCKER HUB PASSWORD>'
```

>Note that we use the standard method described in the [official Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets) to create a Secret. 

You will see the following output:
```shell
secret/registrysecret created
```

{% offtopic title="What if I made a mistake creating a Secret?" %}
In this case, you have to recreate it. But first, delete the existing Secret using the following command:

kubectl delete secret registrysecret
{% endofftopic %}


In the following chapters, we will use Secret `registrysecret` in the `imagePullSecrets` field when configuring Pods (learn more [here](https://kubernetes.io/docs/concepts/configuration/secret/#using-imagepullsecrets)).

> Note the `--docker-server` parameter. It must correspond to the address of the registry being used.
> For example, for GitHub container registry, this parameter must be set to `ghcr.io`, while for Docker Hub, 
> you can omit it and use the default value.

Now the environment is ready for work.

>Note that if you delete namespace or change access rules, you have to run the procedure all over again.


## The environment has stopped working

{% include guides/100_basic/20_cluster/frequent_issues.md.liquid %}
