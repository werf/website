## Making our application stateful

At this point, our application does not use a database and does not store any data (i.e., it is stateless). To make it stateful, we need {% include guides/200_real_apps/040_db/{{ page.framework_id }}/001_preparing_stateful_app.md.liquid %}


{% include guides/200_real_apps/040_db/{{ page.framework_id }}/005_major_changes.md.liquid %}

## Adding `/remember` and `/say` endpoints to the application

Let's add two new endpoints to our application. The `/remember` endpoint will store the data to the database while the `/say` endpoint will retrieve the data from it.

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/007_new_endpoints.md.liquid %}

New endpoints, `/remember` and `/say`, are ready.

## Deploying a MySQL database and connecting to it

In real life, a database can be a part of the Kubernetes infrastructure or run outside of it. Outside of Kubernetes, you can deploy and maintain a database yourself or use a managed solution like Amazon RDS. For illustrative purposes, let's deploy a MySQL database inside the Kubernetes cluster using the following basic StatefulSet:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/017_stateful_set.md.liquid %}
>_Note that you can also use a database deployed differently. In this case, you will not need the above StatefulSet, while all further steps remain unchanged._

Now let's configure our application to use the new database:

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/020_setup_db_work.md.liquid %}

Great, the database and the application are ready to be deployed.

## Initializing and migrating the database

There are several ways to initialize and migrate a database when deploying applications to Kubernetes. We will use one straightforward yet efficient method. {% include guides/200_real_apps/040_db/{{ page.framework_id }}/023_about_method.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/024_about_method_2.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/025_migration_job.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/026_mysql_test_spoiler.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/027_init_container.md.liquid %}

## Testing the application/database

Let's deploy the application:
```shell
werf converge --repo <DOCKER HUB USERNAME>/werf-guide-app
```

You should see the following output:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/030_expected_result.md.liquid %}

> Don't worry if the process seems to be stuck at this point and many errors appear in the messages. This happens due to checking the MySQL status; you just need to wait a bit when it's done (usually, it takes no more than 1-2 minutes).

Now let's try to access the `/say` endpoint that retrieves the data from the database:
```shell
curl http://werf-guide-app.test/say
```

Since the database is still empty, it should return the following message:
```shell
I have nothing to say.
```

Let's save some data to the database using `/remember`:
```shell
curl "http://werf-guide-app.test/remember?answer=Love+you&name=sweetie"
```

The database must respond with the following:
```shell
Got it.
```

Let's try to retrieve the data from the database using the `/say` endpoint once again:
```shell
curl http://werf-guide-app.test/say
```

If successful, you will see the following output:
```shell
Love you, sweetie!
```

You can also make sure that the data is in the database by directly querying the table contents:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/033_database_request.md.liquid %}

You should see the following output:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/035_expected_result_db.md.liquid %}

Done!

In this chapter, we turned our application into a stateful one by connecting it to the corresponding database. We deployed the database to the Kubernetes cluster, initialized it, and performed necessary DB migrations. Note that the above approach should work well with any relational database.

_As usual, you can see all the changes made in this chapter by running the commands provided at the [beginning](#preparing-the-repository)._
