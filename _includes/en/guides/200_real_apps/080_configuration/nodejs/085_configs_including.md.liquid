Once the environment variables are passed to the container, you need to insert them into the application config.

Letâ€™s install the `config` module to manage the app configuration in a consistent fashion:

```shell
npm i config
```


This module makes it possible to redefine the configuration depending on the type of environment and use environment variables. 
This is a configuration file with default values:

{% include snippetcut_example path="config/default.json" syntax="json" examples=page.examples %}

In the snippet below, application parameters are redefined using environment variables:

{% include snippetcut_example path="config/custom-environment-variables.json" syntax="json" examples=page.examples %}

Unfortunately, you cannot use sequelize with the `config` module because the former's config has all the environments defined, 
while the latter has all the environments split between files. To get around this constraint, you can rewrite the sequelize 
configuration in JavaScript and substitute environment variables with `node`:

{% include snippetcut_example path="config/database.js" syntax="javascript" examples=page.examples %}
