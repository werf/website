## Шаблоны, манифесты и ресурсы

werf при деплое использует YAML-манифесты, описывающие Kubernetes-ресурсы. Эти манифесты получаются из Helm-шаблонов, которые лежат в `.helm/templates` и `.helm/charts`.

_Helm-шаблон_, описывающий Pod (один из Kubernetes-ресурсов), мог бы лежать в `.helm/templates/pod.yaml` и выглядеть так:
{% raw %}
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: standalone-pod
spec:
  containers:
  - name: main
    image: {{ $.Values.image }}  # Helm-шаблонизация, позволяет параметризовать имя образа для контейнера
    command: ["tail", "-f", "/dev/null"]
```
{% endraw %}

Перед деплоем этот Helm-шаблон с помощью werf преобразовался бы в _манифест_, который выглядел бы так:
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: standalone-pod
spec:
  containers:
  - name: main
    image: alpine  # если пользователь в качестве имени образа указал "alpine"
    command: ["tail", "-f", "/dev/null"]
```

А уже во время деплоя этот манифест стал бы _ресурсом_ Pod в Kubernetes-кластере. Посмотреть, как этот ресурс выглядел бы в кластере, можно было бы с помощью команды `kubectl get`:
```yaml
kubectl get pod standalone-pod --output yaml
```

Так бы выглядел результат:
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: standalone-pod
  namespace: default
spec:
  containers:
  - name: main
    image: alpine
    command: ["tail", "-f", "/dev/null"]
    ...
status:
  phase: Running
  podIP: 172.17.0.7
  startTime: "2021-06-02T13:17:47Z"
```

## Запуск приложений

Использование ресурса Pod — простейший способ запустить в Kubernetes один или несколько контейнеров. В манифесте Pod'а описываются контейнеры и их конфигурация. Но на практике сами по себе Pod'ы стараются не деплоить — вместо них деплоят Controller'ы, которые создают и управляют Pod'ами за вас. Один из таких контроллеров — **Deployment**. Создавая Pod'ы с помощью Deployment, вы сильно упрощаете управление Pod'ами.

Вот некоторые возможности, которые предоставляет Deployment (и которых нет у Pod'ов самих по себе):
* При автоматическом или ручном удалении Pod'а в Deployment'е этот Pod будет перезапущен;
* Большая часть конфигурации Pod'а не может быть обновлена. Чтобы обновить его конфигурацию, Pod нужно пересоздать. Конфигурацию же Pod'а в Deployment'е можно обновлять без пересоздания Deployment'а;
* Обновление конфигурации Pod'ов происходит без простоя: при обновлении часть Pod'ов со старой конфигурацией остаётся активной до тех пор, пока новые Pod'ы не начнут успешно запускаться;
* Одним Deployment'ом можно запускать нескольких Pod'ов сразу, в том числе на разных Node'ах.

Разные контроллеры имеют разные возможности, связанные с созданием и управлением Pod'ами. Вот основные контроллеры и их практическое применение:
* [Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) — стандарт для деплоя stateless-приложений;
* [StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) — стандарт для деплоя stateful-приложений;
* [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) — для деплоя приложений, которые должны быть запущены только по одному экземпляру на каждом узле (агенты для логирования, мониторинга);
* [Job](https://kubernetes.io/docs/concepts/workloads/controllers/job/) — для запуска разовых задач в Pod'ах (например, миграции базы данных);
* [CronJob](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/) — для многоразового запуска задач 
  в Pod'ах по расписанию (например, регулярная очистка чего-либо).

Получить список ресурсов определенного типа в кластере можно с помощью всё той же команды `kubectl get` (в данном примере команды последовательно возвратят список всех Pod, Deployment, StatefulSet, Job и CronJob из всех namespace):

```shell
kubectl get --all-namespaces pod
```

{% offtopic title="Посмотреть ответ" %}
```shell
NAMESPACE           NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx       ingress-nginx-admission-create-8bgk7        0/1     Completed   0          11d
ingress-nginx       ingress-nginx-admission-patch-8fkgl         0/1     Completed   1          11d
ingress-nginx       ingress-nginx-controller-5d88495688-6lgx9   1/1     Running     1          11d
kube-system         coredns-74ff55c5b-hgzzx                     1/1     Running     1          13d
kube-system         etcd-minikube                               1/1     Running     1          13d
kube-system         kube-apiserver-minikube                     1/1     Running     1          13d
kube-system         kube-controller-manager-minikube            1/1     Running     1          13d
kube-system         kube-proxy-gtrcq                            1/1     Running     1          13d
kube-system         kube-scheduler-minikube                     1/1     Running     1          13d
kube-system         storage-provisioner                         1/1     Running     2          13d
```
{% endofftopic %}

```shell
kubectl get --all-namespaces deployment
```

{% offtopic title="Посмотреть ответ" %}
```shell
NAMESPACE           NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
ingress-nginx       ingress-nginx-controller   1/1     1            1           11d
kube-system         coredns                    1/1     1            1           13d
```
{% endofftopic %}

```shell
kubectl get --all-namespaces statefulset
kubectl get --all-namespaces job
kubectl get --all-namespaces cronjob
```

Также можно получить полную конфигурацию любого ресурса в YAML-формате, если добавить в команду `kubectl get` опцию `--output yaml`, например:

```shell
kubectl -n ingress-nginx get deployment ingress-nginx-controller --output yaml
```

В ответ отобразится следующее:
```yaml
...
kind: Deployment
metadata:
  name: ingress-nginx-controller
...
```

Чаще всего вам придется сталкиваться с ресурсом Deployment, поэтому рассмотрим его подробнее. Про остальные типы контроллеров можно прочитать в [документации к Kubernetes](https://kubernetes.io/docs/concepts/workloads/).

## Deployment

Рассмотрим Deployment нашего приложения подробнее:
{% include snippetcut_example path=".helm/templates/deployment.yaml" syntax="yaml" examples=page.examples_initial %}

> Более подробное описание Deployment доступно в [официальной документации](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/).

Развернём наше приложение:
```shell
werf converge --repo <имя пользователя Docker Hub>/werf-guide-app
```

Убедимся, что наш Deployment создался:
```shell
kubectl get deployment werf-guide-app
```

В ответ отобразится следующее:
```shell
NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
werf-guide-app          1/1     1            1           25s
```

А теперь посмотрим на Pod, созданный нашим Deployment:
```shell
kubectl get pod -l app=werf-guide-app
```

В ответ отобразится примерно следующее:
```shell
NAME                             READY   STATUS    RESTARTS   AGE
werf-guide-app-8b748b85d-829j9   1/1     Running   0          25h
```

## Service и Ingress

С помощью Deployment'а мы можем развернуть наше stateless-приложение, но если пользователям или другим приложениям потребуется связываться с этим приложением изнутри или снаружи кластера, то в этом нам помогут два других ресурса: Ingress и Service.

Рассмотрим наш Ingress-ресурс:
{% include snippetcut_example path=".helm/templates/ingress.yaml" syntax="yaml" examples=page.examples_initial %}

И рассмотрим Service-ресурс:
{% include snippetcut_example path=".helm/templates/service.yaml" syntax="yaml" examples=page.examples_initial %}

Убедимся, что ресурс Service создан:
```shell
kubectl get service werf-guide-app
```

В ответ получим примерно следующее:
```shell
NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
werf-guide-app          ClusterIP   10.107.19.126   <none>        80/TCP    35s
```

Также убедимся, что ресурс Ingress создан:
```shell
kubectl get ingress werf-guide-app
```

В ответ получим следующее:
```shell
NAME                    CLASS    HOSTS                               ADDRESS   PORTS   AGE
werf-guide-app          <none>   werf-guide-app                                80      3m21s
```

Если несколько упростить, то эти два ресурса позволят HTTP-пакетам, приходящим на [NGINX Ingress Controller](https://kubernetes.github.io/ingress-nginx/how-it-works/), у которых есть заголовок `Host: werf-guide-app`, быть перенаправленными на 8000-й порт Service'а `werf-guide-app`, а оттуда — на 8000-й порт одного из Pods нашего Deployment'а. В конфигурации по умолчанию Service будет перенаправлять запросы на все Pods Deployment'а поровну.

Обратимся к нашему приложению через Ingress:
```shell
curl http://werf-guide-app/ping
```

В ответ отобразится следующее:
```shell
pong
```

При этом Service-ресурсы нужны не только для связи Ingress и приложения. Service-ресурсы также дают возможность ресурсам внутри кластера общаться между собой. При создании Service создается доменное имя `<ServiceName>.<NamespaceName>.svc.cluster.local`, доступное изнутри кластера. Также Service доступен и по более коротким доменным именам:
* `<ServiceName>` — при обращении из того же Namespace,
* `<ServiceName>.<NamespaceName>` — при обращении из другого Namespace.

Создадим новый контейнер, не имеющий отношения к нашему приложению:
```shell
kubectl run werf-temporary-deployment --image=alpine --rm -it -- sh
```

В запустившемся контейнере обратимся к нашему приложению через Service:

```shell
apk add curl  # Установим curl внутри контейнера.
curl http://werf-guide-app/ping  # Обратимся к одному из Pod'ов нашего приложения через Service.
```

В ответ отобразится следующее:
```shell
pong
```

> Использование Ingress-ресурсов — не единственный способ получить доступ к приложению снаружи кластера. Service типа **LoadBalancer** и **NodePort** позволит предоставить доступ к приложению снаружи и без Ingress. Почитать подробнее про Service можно в [официальной документации](https://kubernetes.io/docs/concepts/services-networking/service/). А про Ingress'ы — [здесь](https://kubernetes.io/docs/concepts/services-networking/ingress/).
