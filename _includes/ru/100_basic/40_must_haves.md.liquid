## Работа с исходным кодом и гитерминизм

Зачастую часть настроек, влияющих на конфигурацию выкаченного приложения, формируется на основании «внешних» данных: окружения, в котором выполняется сборка и выкат, предустановленных переменных окружения и сгенерированных файлов, использования внешних ресурсов и т.д. Это напрямую влияет на невозможность гарантировать воспроизводимость состояния приложения.

{% offtopic title="А зачем нам воспроизводимость?" %}
Если в любой момент можно быстро воспроизвести состояние приложения, то: проще заниматься отладкой, проще развернуть копию проекта (как для разработки, так и для организации нового стенда) и мы можем увереннее опираться на результаты тестирования на том или ином стенде (т.к. у нас меньше скрытых параметров, влияющих на состояние).

Воспроизводимость фундаментально необходима для реализации подхода [Infrastructure as Code](https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%84%D1%80%D0%B0%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0_%D0%BA%D0%B0%D0%BA_%D0%BA%D0%BE%D0%B4) и immutable infrastructure.
{% endofftopic %}

## Стандартный режим

Чтобы гарантировать воспроизводимость, werf следует принципу **гитерминизма** (giterminism), т.е. определяет _(детерминирует)_ работу с проектом с помощью файлов из текущего Git-состояния (HEAD-коммита). По умолчанию werf не позволяет использовать некоммитнутые файлы в конфигурации и сборочном контексте собираемых образов, а также исключает функционал, потенциально имеющий внешние зависимости.

Мы настоятельно рекомендуем следовать этому подходу, однако при явной необходимости можно явно ослабить ограничения гитерминизма и включить дополнительный функционал, требующий осмысленного использования. Это делается в конфигурации [werf-giterminism.yaml]({{ site.url }}/documentation/reference/werf_giterminism_yaml.html).

Изменение файлов проекта при отладке и разработке может быть неудобным из-за необходимости создавать промежуточные коммиты. В таких случаях рекомендуется работать в [режиме разработчика](#режим-dev).

_Более подробную документацию по гитерминизму см. [здесь]({{ site.url }}/documentation/advanced/giterminism.html)._

### Режим dev

Режим разработчика позволяет ослабить ограничения гитерминизма и работать с некоммитнутыми файлами. Он активируется опцией `--dev` или переменной окружения `WERF_DEV`. Поддерживаются два режима работы, которые регулируются опцией `--dev-mode`:

- _simple_: для работы с состоянием worktree Git-репозитория проекта (используется по умолчанию);
- _strict_: для работы с [состоянием index](http://shafiul.github.io/gitbook/1_the_git_index.html) в Git-репозитории проекта.

Стоит отметить, что новые файлы (_untracked_) должны всегда добавляться в index вручную (это разовая операция, которая выполняется командой `git add` для каждого вновь добавленного файла).

### Режим follow

Режим follow позволяет перезапускать команду при изменении состояния Git:

- команда перезапускается при создании нового коммита;
- совместно с [dev-режимом](#режим-dev) (`--dev`) дополнительно отслеживается состояние index Git-репозитория, а для перезапуска команды достаточно добавить новые изменения в index (`git add`).

Режим активируется опцией `--follow` или переменной окружения `WERF_FOLLOW`.

### Выбор режима для локальной разаботки

Сводная таблица по режимам работы werf:

| Режим                                   | без флагов   | \-\-dev   | \-\-follow | \-\-dev \-\-follow |
| --------------------------------------- | ------------ | --------- | ---------- | ------------------ |
| использование только файлов из коммита  | +            | -         | +          | -                  |
| использование некоммитнутых файлов      | -            | +         | -          | +                  |
| автоматический перезапуск деплоя        | -            | -         | +          | +                  |

## Сборка и тегирование образов

### Сборка

В классическом подходе к сборке образов при помощи родных инструментов Docker требовалось использовать команды `docker build` и `docker tag`, а затем опубликовать вновь собранный образ в registry (через `docker push`).

В werf это делается в рамках одной команды — `werf build`.

Кроме того, в werf «из коробки» работают (включены по умолчанию):

* [**параллельная сборка**]({{ site.url }}/documentation/v1.2/internals/build_process.html#параллельная-сборка), когда независимые образы собираются одновременно;
* **распределенная сборка**, когда werf собирает каждый слой разными сборщиками, а благодаря механизмам синхронизации и блокировок они эффективно переиспользуют общие слои и не нарушают воспроизводимость всех сборок.

### Тегирование образов

Если строить процесс деплоя без werf, вручную, то приходится задавать строгие правила тегирования образов и соблюдать их (поверьте, это [очень непросто](https://www.youtube.com/watch?v=oh4N2wBJCc8)). Однако в случае werf в [чартах](#релизы-и-helm) используется конструкция вида {% raw %}`image: {{ .Values.werf.image.app }}`{% endraw %}:

{% raw %}
```yaml
      - name: app
        image: {{ .Values.werf.image.app }}
        command: ["/app/start.sh"]
```
{% endraw %}

То есть **нет необходимости заботиться о правилах тегирования**: если что-то изменилось в коде — werf самостоятельно инициирует пересборку необходимого образа, загрузит полученный образ со служебными тегами в registry и подставит этот образ в шаблоны. Для того, чтобы всё это корректно работало, werf хранит в registry метаданные и отслеживает содержимое файлов в Git-репозитории.

{% offtopic title="Как это всё получается?" %}
В werf реализовано тегирование, которое называется content-based (т.е. основанное на содержимом): образы меняются и выкатываются автоматически, если меняется состояние контента в Git. Что важно, образы не меняются от коммита к коммиту и не происходит лишних перевыкатов, если состояние контента в GIt не поменялось.

При организации деплоя без использования werf зачастую приходится формализовать принципы, по которым именуются образы в registry. В нашем случае нет необходимости думать об этом: werf берёт организацию тегирования на себя.

Если кратко, werf рассчитывает контрольную сумму файлов, добавляемых в образы, и на основании этого генерирует теги для образа. Однако werf делает это таким образом, чтобы несколько сборок, собирающихся параллельно (в том числе и на разных серверах), не конфликтовали. Для этого используется подход, основанный на идеях [MVCC](https://ru.wikipedia.org/wiki/MVCC) и [optimistic locking](https://en.wikipedia.org/wiki/Optimistic_concurrency_control).

Подробнее о том, как хранятся данные в registry, можно почитать в [документации werf]({{ site.url }}/documentation/internals/stages_and_storage.html). Там написано, как устроен процесс сборки, как учитываются зависимости между стадиями сборки, а также — как устроено именование полученных образов.
{% endofftopic %}

## Релизы и Helm

werf использует Helm для деплоя приложения. [Helm-чарт](https://helm.sh/docs/topics/charts/) — это набор файлов, который описывает связанный набор объектов Kubernetes. Когда чарт выкатывается в кластер в определённое окружение — создаётся _релиз_.

{% offtopic title="Где почитать подробнее" %}
В [документации werf]({{ site.url }}/documentation/v1.2/advanced/helm/releases/release.html) есть подробное описание того, как устроена работа с релизами, их хранение и именование.
{% endofftopic %}

werf всецело использует политику гитерминизма при работе с релизами. Для Helm-релизов применяется механика [3-way merge](https://helm.sh/docs/faq/#improved-upgrade-strategy-3-way-strategic-merge-patches): изменения, вручную внесённые в кластер и противоречащие тому, что описано в Git, будут приведены к состоянию в Git. Обратите внимание, что внесённые вручную изменения, _не_ противоречащие Git, остаются не под контролем Helm и werf.

werf создает релизы самостоятельно, но если вы хотите вручную работать с релизами, доступны команды `werf helm <...>`.

### Посмотреть, что установлено

Определенное состояние выкаченного приложения называется релизом. Релизы показывают, что конкретно в кластере установлено при помощи werf и Helm, в каком окружении и в каком состоянии оно находится.

Чтобы посмотреть список релизов или найти, как называется нужный вам релиз, воспользуйтесь CLI-командой [`werf helm list -A`]({{ site.url }}/documentation/reference/cli/werf_helm_list.html).

### Удалить лишнее

Чтобы удалить релиз приложения из Kubernetes, воспользуйтесь [`werf dismiss`]({{ site.url }}/documentation/reference/cli/werf_dismiss.html).

### Отладка установки

Отладка позволяет посмотреть, что пошло не так в процессе работы werf. Зачастую возникают сложности при выкате релиза из-за ошибок, допущенных при написании чартов. Отладить такие проблемы помогает команда [`werf render`]({{ site.url }}/documentation/reference/cli/werf_render.html).

Эта команда проводит весь цикл сборки и генерации чартов и — вместо деплоя полученного релиза в Kubernetes — выводит полученные чарты. Это «тяжёлая» операция, показывающая конечный результат со всеми реальными подставленными значениями.

_Обратите внимание, что, как и все другие команды, `werf render` работает только с коммитнутыми в Git файлами, но поддерживает режим `--dev`._

## Очистка

Со временем в хранилище (локально или в registry) может накопиться множество данных. Есть две группы команд, которые занимаются очисткой, но имеют разное предназначение: `werf cleanup` и `werf purge` (подробнее можно прочитать в [документации]({{ site.url }}/documentation/advanced/cleanup.html)). Первая работает только с данными в registry, а вторая — со всем, что касается werf.

### werf cleanup

Для регулярной очистки registry от неактуальных данных есть безопасная команда [`werf cleanup`]({{ site.url }}/documentation/reference/cli/werf_cleanup.html). Она безопасно удаляет образы, которые более не требуются, с помощью продвинутого алгоритма, учитывающего Git-историю, содержимое registry и состояние кластера. Команда используется с ключом `--repo <reponame>` для очистки данных определенного project.

Для очистки хоста от неактуальных данных, связанных с werf, используется [`werf host cleanup`]({{ site.url }}/documentation/v1.2/advanced/cleanup.html#очистка-неактуальных-данных-1).

В главе [«Работа с инфраструктурой»]({{ site.url }}/guides/nodejs/400_infra.html) мы будем настраивать регулярную очистку registry по расписанию, используя возможности CI-системы.

### werf purge

Если есть необходимость освободить место на диске, удалив все образы и другие данные, следует использовать [`werf host purge`]({{ site.url }}/documentation/reference/cli/werf_host_purge.html).

Для полного удаления на хосте всего, что связано с werf, следует использовать [`werf purge`]({{ site.url }}/documentation/reference/cli/werf_purge.html). Помните, что это НЕБЕЗОПАСНАЯ КОМАНДА, которая удаляет все образы!
