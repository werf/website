## Новое приложение на {{ page.framework_name }}

Далее мы будем использовать новое простое приложение на {{ page.framework_name }}, функционально идентичное приложению из предыдущего раздела.

Получили мы его следующим образом — сначала был сгенерирован скелет нового {{ page.framework_name }}-приложения{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/002_wirh_command.md.liquid %}

{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/001_generate_app.md.liquid %}

{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/003_notification.md.liquid %}

В нём была оставлена конфигурация только для production-окружения и убрано всё, что не требуется на данном этапе.

{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/005_add_ping.md.liquid %}

{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/010_return_pong.md.liquid %}

Что касается сборки и CI/CD, то основные изменения затронули сборку образа:
{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/015_building_image.md.liquid %}

… а CI/CD изменилось незначительно. К примеру, так выглядит новый Deployment приложения:
{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/020_new_deployment.md.liquid %}

Приложение — полностью stateless, не требует базы данных для работы. Мы сделаем его stateful и развернём для него базу данных в следующих статьях.

## Деплой нового приложения

Проверим работоспособность нового приложения, развернув его в Kubernetes:
```shell
werf converge --repo <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>/werf-guide-app
```

Ожидаемый результат:

{% include guides/200_real_apps/010_basic_app/{{ page.framework_id }}/025_expected_result.md.liquid %}

Прежде чем проверять, работает ли наше приложение, запустите туннель, чтобы открыть доступ к Ingress Controller:

```shell
minikube tunnel
```

> **Примечание:** `minikube tunnel` необходим, если ваш сервис NGINX Ingress Controller имеет тип `LoadBalancer`.
> Эта команда создаёт маршрут на вашей машине, позволяя обращаться к сервисам так, как если бы у них были внешние IP-адреса.
> Обязательно оставьте терминал с запущенной командой открытым, пока работаете с приложением.

Теперь можно проверить, работает ли приложение:
```shell
curl http://werf-guide-app.test/ping
```

Ожидаемый ответ:
```shell
pong
```
