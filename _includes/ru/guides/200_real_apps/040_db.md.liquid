## Подготовка stateful-приложения

Сейчас наше приложение не использует БД и не хранит никаких данных (т.е. stateless). Поэтому, чтобы сделать его stateful, нам в первую очередь нужно {% include guides/200_real_apps/040_db/{{ page.framework_id }}/001_preparing_stateful_app.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/005_major_changes.md.liquid %}

## Добавление endpoints `/remember` и `/say` в приложение

Добавим два новых endpoints, один из которых будет сохранять данные в БД (`/remember`), а второй — доставать их из БД (`/say`).

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/007_new_endpoints.md.liquid %}

Новые endpoints — `/remember` и `/say` — готовы к работе.

## Развертывание и подключение MySQL

В реальной инфраструктуре базы данных могут быть развернуты как в Kubernetes, так и вне его. Вне Kubernetes базы данных могут развертываться и обслуживаться самостоятельно, либо могут использоваться managed-решения вроде Amazon RDS. Для нашего приложения, в целях демонстрации, мы развернём БД MySQL в Kubernetes с помощью простого StatefulSet:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/017_stateful_set.md.liquid %}
>_Вы также можете использовать базы данных, развернутые любым другим способом. В таком случае вам не нужно развертывать вышеупомянутый StatefulSet, все же дальнейшие инструкции остаются без изменений._

Теперь настроим приложение на работу с новой БД:

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/020_setup_db_work.md.liquid %}


## Инициализация и миграции БД

Есть несколько способов выполнять инициализацию и миграции БД при развертывании приложений в Kubernetes. Мы рассмотрим один простой, но хорошо работающий метод. {% include guides/200_real_apps/040_db/{{ page.framework_id }}/023_about_method.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/024_about_method_2.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/025_migration_job.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/026_mysql_test_spoiler.md.liquid %}

{% include guides/200_real_apps/040_db/{{ page.framework_id }}/027_init_container.md.liquid %}

## Проверка работы приложения и БД

Развернём приложение:
```shell
werf converge --repo <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>/werf-guide-app
```

Ожидаемый результат:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/030_expected_result.md.liquid %}

> Если кажется, что процесс завис, а в сообщениях сплошные ошибки — все нормально, просто идет проверка на состояние MySQL, и нужно немного подождать (обычно не более 1-2 минут).

Попробуем обратиться на `/say`, который должен попытаться достать данные из БД:
```shell
curl http://werf-guide-app.test/say
```

Но так как в базе данных пока пусто, должно вернуться следующее:
```shell
I have nothing to say.
```

Тогда сохраним данные в БД через `/remember`:
```shell
curl "http://werf-guide-app.test/remember?answer=Love+you&name=sweetie"
```

Ожидаемый результат, означающий, что данные сохранены:
```shell
Got it.
```

Снова попробуем получить данные из БД через `/say`:
```shell
curl http://werf-guide-app.test/say
```

Ожидаемый успешный результат:
```shell
Love you, sweetie!
```

Также мы можем убедиться, что данные в базе действительно сохранены, запросив напрямую из БД содержимое таблицы:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/033_database_request.md.liquid %}

Ожидаемый результат:
{% include guides/200_real_apps/040_db/{{ page.framework_id }}/035_expected_result_db.md.liquid %}

Готово!

Итогом этой главы стала реализация stateful-приложения, развертывание базы данных вместе с этим приложением, а также автоматическая инициализация БД и выполнение миграций. Подобный подход должен хорошо работать с любыми реляционными БД.

_Как и прежде, увидеть все сделанные в этой главе изменения вы можете, выполнив команды, описанные [в начале главы](#подготовка-репозитория)._
