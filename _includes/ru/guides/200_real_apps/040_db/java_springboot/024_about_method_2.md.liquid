Модуль Hibernate, встроенный в наше приложение, во время запуска последнего выполняет одно из доступных действий, заданных в параметре `spring.jpa.hibernate.ddl-auto` файла настроек `application.properties`. Основными можно выделить четыре варианта работы модуля:

* `validate`: валидация БД на соответствие заданным сущностям. Для валидации лучше использовать сторонний валидатор, например, [Flyway](https://flywaydb.org/), подключаемый как зависимость Maven. Такой режим работы полезен, когда приложение уже закончено, и нам нужно только проверить, что БД соответствует нужной нам структуре, либо подготовить чистую БД к работе с приложением;
* `update`: динамическое обновление структуры БД во время работы. Используется во время разработки, т.к. автоматически подстраивает БД под изменения сущностей;
* `create`: каждый раз перед запуском приложения удаляет все из БД и пересоздает таблицы заново;
* `create-drop`: аналогичен предыдущему, но удаляет все из БД после завершения сеанса работы.

Любой из этих методов подразумевает, что нам необходимо перед стартом приложения убедиться, что MySQL запущена и доступна приложению. Поэтому для начала изменим Dockerfile приложения, установив в контейнер с ним `mysql-client`:

{% include snippetcut_example path="Dockerfile" syntax="dockerfile" examples=page.examples %}

Затем внесем изменения в deployment, добавив проверку на доступность БД перед запуском приложения:

{% include snippetcut_example path=".helm/templates/deployment.yaml" syntax="yaml" examples=page.examples %}

Также здесь мы передали в переменные окружения необходимые для подключения к БД параметры.
