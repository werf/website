## Развертывание кластера

Выберите, каким образом будет развернут Kubernetes:

<div class="tabs">
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn active" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_linux')">Linux: minikube</a>
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_macos')">macOS: minikube</a>
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__minikube_windows')">Windows: minikube</a>
{% comment %} TODO(lesikov): раскомментить как переработаю 20_cluster_has_cluster.md.
<a href="javascript:void(0)" class="tabs__btn tabs__install__btn" onclick="openTab(event, 'tabs__install__btn', 'tabs__install__content', 'tab__install__ihave')">Свой кластер</a>
{% endcomment %}
</div>

<div id="tab__install__minikube_linux" class="tabs__content tabs__install__content active" markdown="1">
{% include guides/100_basic/20_cluster/minikube_linux.md.liquid %}
</div>
<div id="tab__install__minikube_macos" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/minikube_macos.md.liquid %}
</div>
<div id="tab__install__minikube_windows" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/minikube_windows.md.liquid %}
</div>

{% comment %} TODO(lesikov): раскомментить как переработаю 20_cluster_has_cluster.md.liquid
<div id="tab__install__ihave" class="tabs__content tabs__install__content" markdown="1">
{% include guides/100_basic/20_cluster/has_cluster.md.liquid %}
</div>
{% endcomment %}

## Проверка

Для проверки работоспособности выполните:

```shell
curl http://werf-guide-app.test/ping
```

Если всё работает как надо, то NGINX Ingress Controller вернёт ошибку 404:

```html
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
```

> Если у вас уже поднято приложение, на которое смотрит Ingress с доменом `werf-guide-app.test`, то вместо ошибки 404 вы получите ответ от своего приложения.

## Настройка container registry

Далее мы будем использовать Docker Hub container registry, но для этого руководства подойдет и любой другой Registry с TLS и аутентификацией ([GitHub container registry](https://github.com/features/packages), [GitLab container registry](https://docs.gitlab.com/ee/user/packages/container_registry/), ...).

### Авторизация в Docker Hub
Регистрируемся на [Docker Hub](https://hub.docker.com/signup), после чего [создаём приватный репозиторий](https://hub.docker.com/repository/create) с именем `werf-guide-app`, в котором будем хранить собираемые образы.

С помощью `werf cr login` получим доступ с текущего компьютера к новому репозиторию, введя логин и пароль от нашего пользователя на Docker Hub:
```shell
werf cr login https://index.docker.io/v1/ -u <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB> -p <ПАРОЛЬ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>
```

В случае успеха получим ответ:
```shell
Login Succeeded
```

### Создание Secret

Чтобы в процессе работы у нас была возможность использовать образы из *приватного* container registry, нам необходимо создать Secret с учетными данными пользователя. Здесь есть одна особенность — Secret должен располагаться в том же namespace, что и приложение.

Поэтому необходимо заранее создать namespace для нашего приложения:
```shell
kubectl create namespace werf-guide-app
```

В ответ отобразится следующее:
```shell
namespace/werf-guide-app created
```

Далее создадим Secret с именем `registrysecret` в нашем namespace:
```shell
kubectl create secret docker-registry registrysecret \
  --docker-server='https://index.docker.io/v1/' \
  --docker-username='<ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>' \
  --docker-password='<ПАРОЛЬ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>'
```

>Для создания Secret мы используем стандартный способ из [официальной документации Kubernetes](https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets).

В ответ отобразится следующее:
```shell
secret/registrysecret created
```

{% offtopic title="Если ошиблись при создании Secret" %}
То его нужно пересоздать, предварительно удалив уже созданный вариант командой:
```shell
kubectl delete secret registrysecret
```
{% endofftopic %}

В следующих статьях мы будем использовать Secret `registrysecret` в поле `imagePullSecrets` при конфигурации Pod'ов (подробнее можно почитать [здесь](https://kubernetes.io/docs/concepts/configuration/secret/#using-imagepullsecrets)).

> Стоит обратить внимание на опцию `--docker-server`, параметр которой должен соответствовать адресу используемого
> registry. К примеру, для GitHub container registry необходимо иcпользовать `ghcr.io`, а для Docker Hub можно обойтись
> без опции и использовать значение по умолчанию.

Теперь окружение для работы готово.

>Также обратите внимание, что при удалении namespace или изменении правил доступов необходимо выполнить процедуру заново.


## Рабочее окружение работало, но перестало

{% include guides/100_basic/20_cluster/frequent_issues.md.liquid %}
