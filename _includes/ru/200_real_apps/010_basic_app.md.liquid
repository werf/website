## Новое приложение на {{ page.framework_name }}

Далее мы будем использовать новое простое приложение на {{ page.framework_name }}, функционально идентичное приложению из предыдущего раздела.

{% include 200_real_apps/010_basic_app/{{ page.framework_id }}/how_basic_app_was_made.md.liquid %}

Что касается сборки и CI/CD, то основные изменения затронули сборку образа:
{% include snippetcut_example path="Dockerfile" syntax="dockerfile" examples=page.examples %}

… а CI/CD изменилось незначительно. К примеру, так выглядит новый Deployment приложения:
{% include snippetcut_example path=".helm/templates/deployment.yaml" syntax="yaml" examples=page.examples %}

Приложение — полностью stateless, не требует базы данных для работы. Мы сделаем его stateful и развернём для него базу данных в следующих главах.

## Деплой нового приложения

Проверим работоспособность нового приложения, развернув его в Kubernetes:
```shell
werf converge --repo <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>/werf-guide-app
```

Ожидаемый результат:
{% include snippetcut_example path="werf-converge.log" syntax="shell" examples=page.examples %}

Проверим, действительно ли наше приложение работает:
```shell
curl http://werf-guide-app/ping
```

Ожидаемый ответ:
```shell
pong
```
