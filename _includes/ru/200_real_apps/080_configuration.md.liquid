## Как хранить файлы

Контейнеры, развертываемые в Kubernetes, часто будут создаваться и удаляться автоматически — например, из-за обновления Deployment. Это значит, что мы не можем хранить файлы, создающиеся приложением, прямо в файловой системе контейнера. Потому что так файлы будут:
* доступны только одному контейнеру/реплике приложения, а не всем,
* удаляться при удалении контейнера.

Поэтому контейнеры должны хранить в своей файловой системе только те данные, которые можно потерять.

> _Кстати, когда такая возможность есть, файловую систему контейнера даже переключают в read-only, что улучшает безопасность и позволяет убедиться, что приложение действительно не сохраняет данные локально._

Но что делать, если какие-то данные все-таки нужно хранить? Для этого обычно используют развертываемые отдельно базы данных. В частности, для хранения обычных файлов часто используют нереляционные базы данных вроде объектных хранилищ. И особенно часто для хранения файлов используют объектные хранилища, предоставляющие API, совместимый с Amazon S3 API.

Далее мы продемонстрируем, как хранить файлы не в локальной файловой системе, а в S3-совместимом хранилище, чтобы ваши приложения оставались stateless и не испытывали проблем при работе с Kubernetes.

{% include 200_real_apps/050_s3/{{ page.framework_id }}/001_preparing.md.liquid %}

## Добавление endpoint'ов `/upload` и `/download` в приложение

Для демонстрации работы загрузки и отдачи файлов мы добавим два новых endpoints, один из которых будет загружать файл в S3-совместимое объектное хранилище (`/upload`), а другой — отдавать его оттуда (`/download`).

Добавим новый контроллер{% include 200_real_apps/050_s3/{{ page.framework_id }}/005_add_model.md.liquid %}:

{% include 200_real_apps/050_s3/{{ page.framework_id }}/010_add_new_controllerl.md.liquid %}

Добавим новые пути в маршруты:
{% include 200_real_apps/050_s3/{{ page.framework_id }}/015_add_new_routes.md.liquid %}

{% comment %} Adding new migrations if they are needed {% endcomment %}
{% include 200_real_apps/050_s3/{{ page.framework_id }}/020_new_migrations.md.liquid %}

Новые endpoint'ы — `/upload` и `/download` — добавлены. Осталось только настроить для них работу с хранилищем.

## Развертывание и подключение MinIO

Для демонстрации, в качестве S3-совместимого объектного хранилища мы будем использовать [MinIO](https://min.io/), но вместо него может использоваться и любое другое S3-хранилище (например, Amazon S3).

> _Обратите внимание, что если вы используете иное S3-хранилище, то создание нижеописанных StatefulSet и Job для MinIO не потребуется, но остальные инструкции останутся актуальными._

Добавим StatefulSet с MinIO:
{% include 200_real_apps/050_s3/{{ page.framework_id }}/025_stateful_minio.md.liquid %}

Создадим Job для настройки MinIO:
{% include 200_real_apps/050_s3/{{ page.framework_id }}/030_job_minio.md.liquid %}

Добавим в приложение конфигурацию для подключения к MinIO:
{% include 200_real_apps/050_s3/{{ page.framework_id }}/035_minio_configuration.md.liquid %}

{% comment %} Minio activation, if needed {% endcomment %}
{% include 200_real_apps/050_s3/{{ page.framework_id }}/040_minio_activation.md.liquid %}

Теперь MinIO готов к развертыванию, а приложение — настроено на хранение файлов в нём.

## Проверка работы хранилища

Развернём приложение:
```shell
werf converge --repo <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>/werf-guide-app
```

Ожидаемый результат:
{% include 200_real_apps/050_s3/{{ page.framework_id }}/045_expected_result.md.liquid %}

Обратимся на `/download`, который должен попытаться достать файл из S3:
```shell
curl http://werf-guide-app/download
```

Так как пока никаких файлов не загружено, получим:
```
You haven't uploaded anything yet.
```

Тогда создадим новый файл и загрузим его в S3:
<div class="tabs">
<a href="javascript:void(0)" class="tabs__btn tabs__s3__btn active" onclick="openTab(event, 'tabs__s3__btn', 'tabs__s3__content', 'tab__s3__linux_macos')">Linux/macOS</a>
<a href="javascript:void(0)" class="tabs__btn tabs__s3__btn" onclick="openTab(event, 'tabs__s3__btn', 'tabs__s3__content', 'tab__s3__windows')">Windows</a>
</div>
<div id="tab__s3__linux_macos" class="tabs__content tabs__s3__content active" markdown="1">
```shell
echo "This is file content." > file.txt
curl -F "file=@file.txt" http://werf-guide-app/upload
```
</div>
<div id="tab__s3__windows" class="tabs__content tabs__s3__content" markdown="1">
```shell
"This is file content." | Out-File -Encoding ascii -FilePath file.txt
curl.exe -F "file=@file.txt" http://werf-guide-app/upload
```
</div>

Ожидаемый результат, означающий, что файл сохранён в хранилище:
```
File uploaded.
```

Снова попробуем получить файл из хранилища:
```shell
curl http://werf-guide-app/download
```

В ответ должно отобразиться содержимое файла:
```
This is file content.
```

Также убедимся, что файл сохранился и достаётся именно из хранилища. Для этого сначала запустим контейнер с утилитой `mc` для взаимодействия с MinIO:
```shell
kubectl run mc --image=minio/mc --rm -it --command -- bash
```

Теперь, оказавшись внутри контейнера, выполним команды:
```shell
# Настроим подключение к MinIO.
mc alias set minio http://minio:9000 minioadmin minioadmin
# Получим содержимое сохранённого файла из S3.
mc cat "minio/werf-guide-app/$(mc ls minio/werf-guide-app | awk 'NR==1 {print $5}')"
```

Ожидаемый результат:
```
This is file content.
```

Теперь, если нам требуется работать с файлами, мы можем получать и хранить их в объектном хранилище, а не в файловой системе контейнера. При таком подходе Pod'ы приложения могут создаваться и удаляться без проблем: файлы не потеряются, будут доступны с любой реплики Deployment'а приложения, а файловая система на узлах Kubernetes не будет заполняться ненужными файлами.

Не забывайте: в контейнере можно хранить только те данные, которые можно потерять. Все остальные данные нужно хранить в соответствующих базах данных/хранилищах. Такой подход, в частности, [подтверждается](https://cloud.google.com/architecture/best-practices-for-operating-containers#ensure_that_your_containers_are_stateless_and_immutable) лучшими практиками от инженеров Google Cloud.
