## ConfigMap и Secret

В Kubernetes есть специальные типы ресурсов ConfigMap и Secret, которые предназначены для отделения конфигурации, зависящей от среды и окружения, от образов контейнеров. 

Оба ресурса позволяют хранить данные в парах «ключ-значение» и впоследствии использовать их как переменные окружения, аргументы командной строки или как файлы, примонтированные в выбранный контейнер.

ConfigMap предназначен для хранения неконфиденциальных данных, в отличие от Secret, который используется для хранения различных типов секретов.

Подробнее про эти типы ресурсов можно почитать в официальной документации Kubernetes ([ConfigMaps](https://kubernetes.io/docs/concepts/configuration/configmap/), [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)). Далее мы разберём частые случаи их использования на примере нашего приложения.

## Хранение конфигурационных файлов приложения в ConfigMap

Сейчас конфигурационный файл [nginx.conf]({% include 200_real_apps/080_configuration/{{ page.framework_id }}/001_nginx_config.md.liquid %}) копируется в образ прямо во время сборки. Из-за этого при каждом его изменении будут происходить пересборка образа и перезапуск Pod'ов. Также сейчас нет простой возможности шаблонизировать `nginx.conf`.

Эти проблемы решаются, если перенести `.werf/nginx.conf` в отдельный ConfigMap — для того, чтобы монтировать `nginx.conf` во время деплоя, а не добавлять файл при сборке:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/005_nginx_config_map.md.liquid %}

Теперь добавим этот ConfigMap в Deployment, примонтировав его как файл внутрь контейнера `frontend`:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/010_config_map_deployment.md.liquid %}

Не забудем удалить более ненужный файл `.werf/nginx.conf`, а также команду копирования этого файла в образ во время сборки, после чего сборка образа `frontend` станет выглядеть так:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/015_new_dockerfile.md.liquid %}

## Перевыкат Deployment при изменении ConfigMap и Secret

По умолчанию, изменения в ConfigMap и Secret, примонтированных к Deployment, StatefulSet или DaemonSet, не приведут к перезапуску Pod'ов с новой конфигурацией. Чтобы Pod'ы обновились, их нужно аннотировать хеш-суммами всех используемых Pod'ом ConfigMap и Secret. Тогда при изменении ConfigMap и Secret аннотация изменится и Pod пересоздастся. Так выглядит аннотация с хеш-суммой ConfigMap с `nginx.conf`:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/020_annotation_hashsum.md.liquid %}
Для каждого подключенного ConfigMap и Secret потребуется отдельная аннотация.
>_Авторы самоучителя предпочитают вместо аннотаций с хеш-суммами использовать операторы вроде [stakater/Reloader](https://github.com/stakater/Reloader), т.к. они проще, гибче и удобнее в работе._

## Values

Использование Helm-чарта для выката приложения даёт ряд преимуществ — например, возможность шаблонизировать манифесты. Ключевой встроенный объект шаблонизации — это `Values`, который предоставляет доступ к значениям, передаваемым в чарт из различных источников.

При использовании werf все данные, передаваемые в chart, можно условно разделить на несколько категорий:
- [Обычные пользовательские данные]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/values.html#обычные-пользовательские-данные): параметры из файлов `values.yaml` и соответствующих опций. 
- [Пользовательские секреты]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/values.html#пользовательские-секреты): параметры из файлов `secret-values.yaml`.
- [Сервисные данные]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/values.html#сервисные-данные): информация о проекте, релизе, собранных образах и т.д.

## Переиспользование конфигурации с Values и ConfigMap

Для упрощения конфигурации манифестов часто используемые параметры можно выносить в `.helm/values.yaml`:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/025_values_yaml.md.liquid %}

... и далее использовать в манифесте следующим образом:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/030_values_yaml_using.md.liquid %}

Это также позволит иметь разные значения для разных окружений, о чем более подробно будет рассказано в следующих разделах самоучителя.

Но особенно полезным будет перенос в `.helm/values.yaml` повторяющейся конфигурации, например, переменных окружения для приложения, которые мы используем в нескольких местах сразу:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/035_values_yaml_env.md.liquid %}

Теперь переменные окружения из `.Values.app.envs` можно либо подставлять в манифест в `env` контейнера, как было сделано ранее, либо вынести эти переменные окружения в ConfigMap, который потом подключить в контейнер через `envFrom`.

Первый вариант проще, но вариант с ConfigMap удобнее при большом количестве общих переменных окружения, т.к. позволит избежать их дублирования между контроллерами. ConfigMap может выглядеть так:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/040_configmap_envs.md.liquid %}

Подключаем этот ConfigMap через `envFrom` в Deployment как набор переменных окружения:

{% include 200_real_apps/080_configuration/{{ page.framework_id }}/045_configmap_deployment.md.liquid %}

Не забываем про аннотации с хеш-суммами, которые приведут к пересозданию Pod'ов при изменении ConfigMap:

{% include 200_real_apps/080_configuration/{{ page.framework_id }}/050_annotation_hashsum.md.liquid %}

Аналогично этот ConfigMap подключается и в остальные ресурсы, в которых требуются те же переменные окружения.

## Использование конфиденциальных данных с Values и Secret

Чтобы начать работу с секретами, сначала требуется сгенерировать симметричный ключ шифрования, что можно сделать командой `werf helm secret generate-secret-key`. Однако, поскольку мы уже заранее подготовили и зашифровали секреты, то и ключ шифрования мы сгенерировали за вас. Он находится в репозитории в файле `.werf_secret_key` и начнёт использоваться автоматически.

>_При работе с реальными приложениями ключ НЕЛЬЗЯ хранить в репозитории. Вместо этого рекомендуется передавать его через переменную окружения `WERF_SECRET_KEY`, храня его в безопасном месте. Подробнее про работу с ключами шифрования можно прочитать в [документации werf]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/secrets.html#%D0%BA%D0%BB%D1%8E%D1%87-%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)._

Конфигурация приложения содержит данные, которые не должны храниться в незашифрованном виде в репозитории — например, логин и пароль от базы данных. Вместо того, чтобы хранить логин и пароль в открытом виде в {% include 200_real_apps/080_configuration/{{ page.framework_id }}/055_loginpas_storage.md.liquid %} мы будем хранить их зашифрованными в `.helm/secret-values.yaml` вместе с другими секретными параметрами:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/060_secret_values.md.liquid %}

Чтобы увидеть расшифрованными секреты, хранящиеся в `.helm/secret-values.yaml`, можно выполнить следующую команду:
```bash
werf helm secret values decrypt .helm/secret-values.yaml
```

Ожидаемый результат:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/065_expected_result.md.liquid %}

Теперь нужно передать секреты из `.helm/secret-values.yaml` обратно в конфигурационный файл приложения. Для этого сначала передадим их в ресурс Secret:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/070_secret_resource.md.liquid %}

... а затем примонтируем Secret в контейнеры как набор переменных окружения:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/075_secret_mounting.md.liquid %}

Изменения в остальных файлах `.helm/templates` для вынесения секретной конфигурации в Secret аналогичны, поэтому приводить здесь листинги не будем, на их содержимое можно посмотреть в [репозитории]({% include 200_real_apps/080_configuration/{{ page.framework_id }}/080_repo_link.md.liquid %}).

{% include 200_real_apps/080_configuration/{{ page.framework_id }}/085_configs_including.md.liquid %}

Для хранения и монтирования секретных конфигурационных файлов целиком также можно использовать Secret. Выглядит это аналогично использованию ConfigMap для монтирования несекретных файлов конфигурации, [описанному выше](#хранение-конфигурационных-файлов-приложения-в-configmap), за тем лишь исключением, что само содержание Secret должно храниться зашифрованным в файлах `.helm/secret/...` или в `.helm/secret-values.yaml`. Подробнее об этом можно прочитать в [документации werf]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/secrets.html#%D1%81%D0%B5%D0%BA%D1%80%D0%B5%D1%82%D0%BD%D1%8B%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B).

Больше информации по работе с секретами также доступно в [документации werf]({{ site.url }}/documentation/v1.2/advanced/helm/configuration/secrets.html).

## Проверка работоспособности

Убедимся, что изменения в конфигурации не повлияли на работоспособность приложения:
```shell
werf converge --repo <ИМЯ ПОЛЬЗОВАТЕЛЯ DOCKER HUB>/werf-guide-app
```

Ожидаемый результат:
{% include 200_real_apps/080_configuration/{{ page.framework_id }}/090_expected_result.md.liquid %}

Проверим доступность приложения:
```shell
curl http://werf-guide-app/ping
```

Ожидаемый результат:
```
pong
```

Теперь секретная конфигурация приложения хранится безопасно, дублирование конфигурации минимизировано, а файлы конфигурации приложений могут шаблонизироваться и больше не требуют пересборок при изменениях.
